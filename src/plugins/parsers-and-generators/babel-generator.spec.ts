
import * as babelGenerator from '@babel/generator';
import * as sinon from 'sinon';
import { expect } from 'chai';
import { BabelGenerator } from './babel-generator';

describe('plugins > parsers-and-generators', (): void => {
  describe('BabelGenerator', (): void => {

    describe('generateCode()', (): void => {

      let generatorStub: sinon.SinonStub;

      beforeEach((): void => {
        generatorStub = sinon.stub(babelGenerator, 'default');
      });

      afterEach((): void => {
        generatorStub.restore();
      });

      it('should invoke babelGenerator.default() with the ast, config', (): void => {

        generatorStub.returns({code: ''});

        BabelGenerator.generateCode(<any>{}, <any>{});

        sinon.assert.calledOnceWithExactly(generatorStub, <any>{}, {});

      });


      it('should return the ast generated by parser', (): void => {

        generatorStub.returns({code: ''});

        const result: any = BabelGenerator.generateCode(<any>{}, <any>{});

        expect(result).to.eql('');

      });

      it('should rethrow the error thrown by the generator', (): void => {

        generatorStub.throws(new Error());

        expect((): any => BabelGenerator.generateCode(<any>{}, {})).to.throw('Error generating Code from AST');

      });

    });

  });
});
