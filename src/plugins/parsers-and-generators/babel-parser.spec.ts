
import * as babelParser from '@babel/parser';
import { BabelParser } from './babel-parser';
import * as sinon from 'sinon';
import { expect } from 'chai';
import { Store } from '../store/store';
import { ASTNode } from '../../models/AST-node.model';
import { ASTUtils } from '../../utils/ast-utils';

describe('plugins > parsers-and-generators', (): void => {
  describe('BabelParser', (): void => {

    describe('generateAST()', (): void => {

      let parserStub: sinon.SinonStub, cacheASTNodesStub: sinon.SinonStub;

      beforeEach((): void => {
        parserStub = sinon.stub(babelParser, 'parse');
        cacheASTNodesStub = sinon.stub(ASTUtils, 'cacheASTNodes');
      });

      afterEach((): void => {
        parserStub.restore();
        cacheASTNodesStub.restore();
      });

      it('should invoke babelParser.parse() with the source code, config', (): void => {

        parserStub.returns({});

        BabelParser.generateAST('source code', <any>{}, 'filePath');

        sinon.assert.calledOnceWithExactly(parserStub, 'source code', {});

      });

      it('should invoke _cacheASTNodes() with the ast generated by parser and the file path', (): void => {

        parserStub.returns({});

        BabelParser.generateAST('source code', <any>{}, 'filePath');

        sinon.assert.calledOnceWithExactly(cacheASTNodesStub, {}, 'filePath');

      });

      it('should return the ast generated by parser', (): void => {

        parserStub.returns({});

        const result: any = BabelParser.generateAST('source code', <any>{}, 'filePath');

        expect(result).to.eql({});

      });

      it('should rethrow the error thrown by the parser', (): void => {

        parserStub.throws(new Error('something went wrong'));

        expect((): any => BabelParser.generateAST('', {}, '')).to.throw('something went wrong');

      });

      it('should rethrow the error thrown by the cacheASTNodes', (): void => {

        cacheASTNodesStub.throws(new Error('something went wrong'));

        expect((): any => BabelParser.generateAST('', {}, '')).to.throw('something went wrong');

      });

    });

  });
});
