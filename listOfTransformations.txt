{
  "2": [
    {
      "filename": "/home/osboxes/esdoc/src/ESDoc.js",
      "startLine": 46,
      "endLine": 46,
      "before": "/**\n * Generate documentation.\n * @param {ESDocConfig} config - config for generation.\n */\nstatic generate(config) {\n  assert(config.source);\n  assert(config.destination);\n\n  this._checkOldConfig(config);\n\n  Plugin.init(config.plugins);\n  Plugin.onStart();\n  config = Plugin.onHandleConfig(config);\n\n  this._setDefaultConfig(config);\n\n  logger.debug = !!config.debug;\n  const includes = config.includes.map(v => new RegExp(v));\n  const excludes = config.excludes.map(v => new RegExp(v));\n  let packageName = null;\n  let mainFilePath = null;\n\n  if (config.package) {\n    try {\n      const packageJSON = fs.readFileSync(config.package, {\n        encode: 'utf8'\n      });\n      const packageConfig = JSON.parse(packageJSON);\n      packageName = packageConfig.name;\n      mainFilePath = packageConfig.main;\n    } catch (e) {// ignore\n    }\n  }\n\n  let results = [];\n  const asts = [];\n  const sourceDirPath = path.resolve(config.source);\n\n  this._walk(config.source, filePath => {\n    const relativeFilePath = path.relative(sourceDirPath, filePath);\n    let match = false;\n\n    for (const reg of includes) {\n      if (relativeFilePath.match(reg)) {\n        match = true;\n        break;\n      }\n    }\n\n    if (!match) return;\n\n    for (const reg of excludes) {\n      if (relativeFilePath.match(reg)) return;\n    }\n\n    console.log(`parse: ${filePath}`);\n\n    const temp = this._traverse(config.source, filePath, packageName, mainFilePath);\n\n    if (!temp) return;\n    results.push(...temp.results);\n\n    if (config.outputAST) {\n      asts.push({\n        filePath: `source${path.sep}${relativeFilePath}`,\n        ast: temp.ast\n      });\n    }\n  }); // config.index\n\n\n  if (config.index) {\n    results.push(this._generateForIndex(config));\n  } // config.package\n\n\n  if (config.package) {\n    results.push(this._generateForPackageJSON(config));\n  }\n\n  results = this._resolveDuplication(results);\n  results = Plugin.onHandleDocs(results); // index.json\n\n  {\n    const dumpPath = path.resolve(config.destination, 'index.json');\n    fs.outputFileSync(dumpPath, JSON.stringify(results, null, 2));\n  } // ast, array will be empty if config.outputAST is false - resulting in skipping the loop\n\n  for (const ast of asts) {\n    const json = JSON.stringify(ast.ast, null, 2);\n    const filePath = path.resolve(config.destination, `ast/${ast.filePath}.json`);\n    fs.outputFileSync(filePath, json);\n  } // publish\n\n\n  this._publish(config);\n\n  Plugin.onComplete();\n}\n/**\n * check ESDoc config. and if it is old, exit with warning message.\n * @param {ESDocConfig} config - check config\n * @private\n */",
      "after": "/**\n * Generate documentation.\n * @param {ESDocConfig} config - config for generation.\n */\nstatic async generate(config) {\n  assert(config.source);\n  assert(config.destination);\n\n  this._checkOldConfig(config);\n\n  Plugin.init(config.plugins);\n  Plugin.onStart();\n  config = Plugin.onHandleConfig(config);\n\n  this._setDefaultConfig(config);\n\n  logger.debug = !!config.debug;\n  const includes = config.includes.map(v => new RegExp(v));\n  const excludes = config.excludes.map(v => new RegExp(v));\n  let packageName = null;\n  let mainFilePath = null;\n\n  if (config.package) {\n    try {\n      const packageJSON = await fs.promises.readFile(config.package, {\n        encode: 'utf8'\n      });\n      const packageConfig = JSON.parse(packageJSON);\n      packageName = packageConfig.name;\n      mainFilePath = packageConfig.main;\n    } catch (e) {// ignore\n    }\n  }\n\n  let results = [];\n  const asts = [];\n  const sourceDirPath = path.resolve(config.source);\n\n  this._walk(config.source, filePath => {\n    const relativeFilePath = path.relative(sourceDirPath, filePath);\n    let match = false;\n\n    for (const reg of includes) {\n      if (relativeFilePath.match(reg)) {\n        match = true;\n        break;\n      }\n    }\n\n    if (!match) return;\n\n    for (const reg of excludes) {\n      if (relativeFilePath.match(reg)) return;\n    }\n\n    console.log(`parse: ${filePath}`);\n\n    const temp = this._traverse(config.source, filePath, packageName, mainFilePath);\n\n    if (!temp) return;\n    results.push(...temp.results);\n\n    if (config.outputAST) {\n      asts.push({\n        filePath: `source${path.sep}${relativeFilePath}`,\n        ast: temp.ast\n      });\n    }\n  }); // config.index\n\n\n  if (config.index) {\n    results.push(this._generateForIndex(config));\n  } // config.package\n\n\n  if (config.package) {\n    results.push(this._generateForPackageJSON(config));\n  }\n\n  results = this._resolveDuplication(results);\n  results = Plugin.onHandleDocs(results); // index.json\n\n  {\n    const dumpPath = path.resolve(config.destination, 'index.json');\n    fs.outputFileSync(dumpPath, JSON.stringify(results, null, 2));\n  } // ast, array will be empty if config.outputAST is false - resulting in skipping the loop\n\n  for (const ast of asts) {\n    const json = JSON.stringify(ast.ast, null, 2);\n    const filePath = path.resolve(config.destination, `ast/${ast.filePath}.json`);\n    fs.outputFileSync(filePath, json);\n  } // publish\n\n\n  this._publish(config);\n\n  Plugin.onComplete();\n}\n/**\n * check ESDoc config. and if it is old, exit with warning message.\n * @param {ESDocConfig} config - check config\n * @private\n */"
    },
    {
      "filename": "/home/osboxes/esdoc/src/ESDocCLI.js",
      "startLine": 49,
      "endLine": 49,
      "before": "/**\n * execute to generate document.\n */\nexec() {\n  let config;\n\n  const configPath = this._findConfigFilePath();\n\n  if (configPath) {\n    config = this._createConfigFromJSONFile(configPath);\n  } else {\n    config = this._createConfigFromPackageJSON();\n  }\n\n  if (config) {\n    ESDoc.generate(config);\n  } else {\n    this._showHelp();\n\n    process.exit(1);\n  }\n}\n/**\n * show help of ESDoc\n * @private\n */",
      "after": "/**\n * execute to generate document.\n */\nasync exec() {\n  let config;\n\n  const configPath = this._findConfigFilePath();\n\n  if (configPath) {\n    config = this._createConfigFromJSONFile(configPath);\n  } else {\n    config = this._createConfigFromPackageJSON();\n  }\n\n  if (config) {\n    await ESDoc.generate(config);\n  } else {\n    this._showHelp();\n\n    process.exit(1);\n  }\n}\n/**\n * show help of ESDoc\n * @private\n */"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test-ci.js",
      "startLine": 4,
      "endLine": 4,
      "before": "sh.exec('./script/eslint.js')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec('./script/eslint.js')"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test-ci.js",
      "startLine": 5,
      "endLine": 5,
      "before": "sh.exec('./script/test.js --coverage')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec('./script/test.js --coverage')"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test-ci.js",
      "startLine": 6,
      "endLine": 6,
      "before": "sh.exec('./node_modules/.bin/codecov')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec('./node_modules/.bin/codecov')"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test.js",
      "startLine": 4,
      "endLine": 4,
      "before": "sh.exec('./script/eslint.js')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec('./script/eslint.js')"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test.js",
      "startLine": 18,
      "endLine": 18,
      "before": "sh.exec(`NODE_ENV=coverage ./node_modules/.bin/nyc ./node_modules/mocha/bin/_mocha ${mochaOption}`)",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec(`NODE_ENV=coverage ./node_modules/.bin/nyc ./node_modules/mocha/bin/_mocha ${mochaOption}`)"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test.js",
      "startLine": 20,
      "endLine": 20,
      "before": "sh.exec(`./node_modules/.bin/mocha ${mochaOption}`)",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec(`./node_modules/.bin/mocha ${mochaOption}`)"
    },
    {
      "filename": "/home/osboxes/esdoc/src/ESDocCLI.js",
      "startLine": 159,
      "endLine": 159,
      "before": "cli.exec()",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait cli.exec()"
    },
    {
      "filename": "/home/osboxes/esdoc/test/init.js",
      "startLine": 16,
      "endLine": 16,
      "before": "function cli(configPath) {\n  const cliPath = path.resolve('./src/cli.js');\n  const argv = ['node', cliPath];\n\n  if (configPath) {\n    configPath = path.resolve(configPath);\n    argv.push('-c', configPath);\n    console.log(`== start == ${configPath}`);\n  }\n\n  const cli = new ESDocCLI(argv);\n  cli.exec();\n  console.log(`== finish ==`);\n}",
      "after": "async function cli(configPath) {\n  const cliPath = path.resolve('./src/cli.js');\n  const argv = ['node', cliPath];\n\n  if (configPath) {\n    configPath = path.resolve(configPath);\n    argv.push('-c', configPath);\n    console.log(`== start == ${configPath}`);\n  }\n\n  const cli = new ESDocCLI(argv);\n  await cli.exec();\n  console.log(`== finish ==`);\n}"
    },
    {
      "filename": "/home/osboxes/esdoc/test/init.js",
      "startLine": 20,
      "endLine": 20,
      "before": "cli('./test/integration-test/esdoc.json')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait cli('./test/integration-test/esdoc.json')"
    }
  ],
  "3": [
    {
      "filename": "/home/osboxes/esdoc/src/ESDoc.js",
      "startLine": 179,
      "endLine": 179,
      "before": "/**\n * walk recursive in directory.\n * @param {string} dirPath - target directory path.\n * @param {function(entryPath: string)} callback - callback for find file.\n * @private\n */\nstatic _walk(dirPath, callback) {\n  const entries = fs.readdirSync(dirPath);\n\n  for (const entry of entries) {\n    const entryPath = path.resolve(dirPath, entry);\n    const stat = fs.statSync(entryPath);\n\n    if (stat.isFile()) {\n      callback(entryPath);\n    } else if (stat.isDirectory()) {\n      this._walk(entryPath, callback);\n    }\n  }\n}\n/**\n * traverse doc comment in JavaScript file.\n * @param {string} inDirPath - root directory path.\n * @param {string} filePath - target JavaScript file path.\n * @param {string} [packageName] - npm package name of target.\n * @param {string} [mainFilePath] - npm main file path of target.\n * @returns {Object} - return document that is traversed.\n * @property {DocObject[]} results - this is contained JavaScript file.\n * @property {AST} ast - this is AST of JavaScript file.\n * @private\n */",
      "after": "/**\n * walk recursive in directory.\n * @param {string} dirPath - target directory path.\n * @param {function(entryPath: string)} callback - callback for find file.\n * @private\n */\nstatic async _walk(dirPath, callback) {\n  const entries = fs.readdirSync(dirPath);\n\n  for (const entry of entries) {\n    const entryPath = path.resolve(dirPath, entry);\n    const stat = await fs.promises.stat(entryPath);\n\n    if (stat.isFile()) {\n      callback(entryPath);\n    } else if (stat.isDirectory()) {\n      this._walk(entryPath, callback);\n    }\n  }\n}\n/**\n * traverse doc comment in JavaScript file.\n * @param {string} inDirPath - root directory path.\n * @param {string} filePath - target JavaScript file path.\n * @param {string} [packageName] - npm package name of target.\n * @param {string} [mainFilePath] - npm main file path of target.\n * @returns {Object} - return document that is traversed.\n * @property {DocObject[]} results - this is contained JavaScript file.\n * @property {AST} ast - this is AST of JavaScript file.\n * @private\n */"
    },
    {
      "filename": "/home/osboxes/esdoc/src/ESDoc.js",
      "startLine": 59,
      "endLine": 81,
      "before": "/**\n * Generate documentation.\n * @param {ESDocConfig} config - config for generation.\n */\nstatic generate(config) {\n  assert(config.source);\n  assert(config.destination);\n\n  this._checkOldConfig(config);\n\n  Plugin.init(config.plugins);\n  Plugin.onStart();\n  config = Plugin.onHandleConfig(config);\n\n  this._setDefaultConfig(config);\n\n  logger.debug = !!config.debug;\n  const includes = config.includes.map(v => new RegExp(v));\n  const excludes = config.excludes.map(v => new RegExp(v));\n  let packageName = null;\n  let mainFilePath = null;\n\n  if (config.package) {\n    try {\n      const packageJSON = fs.readFileSync(config.package, {\n        encode: 'utf8'\n      });\n      const packageConfig = JSON.parse(packageJSON);\n      packageName = packageConfig.name;\n      mainFilePath = packageConfig.main;\n    } catch (e) {// ignore\n    }\n  }\n\n  let results = [];\n  const asts = [];\n  const sourceDirPath = path.resolve(config.source);\n\n  this._walk(config.source, filePath => {\n    const relativeFilePath = path.relative(sourceDirPath, filePath);\n    let match = false;\n\n    for (const reg of includes) {\n      if (relativeFilePath.match(reg)) {\n        match = true;\n        break;\n      }\n    }\n\n    if (!match) return;\n\n    for (const reg of excludes) {\n      if (relativeFilePath.match(reg)) return;\n    }\n\n    console.log(`parse: ${filePath}`);\n\n    const temp = this._traverse(config.source, filePath, packageName, mainFilePath);\n\n    if (!temp) return;\n    results.push(...temp.results);\n\n    if (config.outputAST) {\n      asts.push({\n        filePath: `source${path.sep}${relativeFilePath}`,\n        ast: temp.ast\n      });\n    }\n  }); // config.index\n\n\n  if (config.index) {\n    results.push(this._generateForIndex(config));\n  } // config.package\n\n\n  if (config.package) {\n    results.push(this._generateForPackageJSON(config));\n  }\n\n  results = this._resolveDuplication(results);\n  results = Plugin.onHandleDocs(results); // index.json\n\n  {\n    const dumpPath = path.resolve(config.destination, 'index.json');\n    fs.outputFileSync(dumpPath, JSON.stringify(results, null, 2));\n  } // ast, array will be empty if config.outputAST is false - resulting in skipping the loop\n\n  for (const ast of asts) {\n    const json = JSON.stringify(ast.ast, null, 2);\n    const filePath = path.resolve(config.destination, `ast/${ast.filePath}.json`);\n    fs.outputFileSync(filePath, json);\n  } // publish\n\n\n  this._publish(config);\n\n  Plugin.onComplete();\n}\n/**\n * check ESDoc config. and if it is old, exit with warning message.\n * @param {ESDocConfig} config - check config\n * @private\n */",
      "after": "/**\n * Generate documentation.\n * @param {ESDocConfig} config - config for generation.\n */\nstatic async generate(config) {\n  assert(config.source);\n  assert(config.destination);\n\n  this._checkOldConfig(config);\n\n  Plugin.init(config.plugins);\n  Plugin.onStart();\n  config = Plugin.onHandleConfig(config);\n\n  this._setDefaultConfig(config);\n\n  logger.debug = !!config.debug;\n  const includes = config.includes.map(v => new RegExp(v));\n  const excludes = config.excludes.map(v => new RegExp(v));\n  let packageName = null;\n  let mainFilePath = null;\n\n  if (config.package) {\n    try {\n      const packageJSON = await fs.promises.readFile(config.package, {\n        encode: 'utf8'\n      });\n      const packageConfig = JSON.parse(packageJSON);\n      packageName = packageConfig.name;\n      mainFilePath = packageConfig.main;\n    } catch (e) {// ignore\n    }\n  }\n\n  let results = [];\n  const asts = [];\n  const sourceDirPath = path.resolve(config.source);\n  await this._walk(config.source, filePath => {\n    const relativeFilePath = path.relative(sourceDirPath, filePath);\n    let match = false;\n\n    for (const reg of includes) {\n      if (relativeFilePath.match(reg)) {\n        match = true;\n        break;\n      }\n    }\n\n    if (!match) return;\n\n    for (const reg of excludes) {\n      if (relativeFilePath.match(reg)) return;\n    }\n\n    console.log(`parse: ${filePath}`);\n\n    const temp = this._traverse(config.source, filePath, packageName, mainFilePath);\n\n    if (!temp) return;\n    results.push(...temp.results);\n\n    if (config.outputAST) {\n      asts.push({\n        filePath: `source${path.sep}${relativeFilePath}`,\n        ast: temp.ast\n      });\n    }\n  }); // config.index\n\n  if (config.index) {\n    results.push(this._generateForIndex(config));\n  } // config.package\n\n\n  if (config.package) {\n    results.push(this._generateForPackageJSON(config));\n  }\n\n  results = this._resolveDuplication(results);\n  results = Plugin.onHandleDocs(results); // index.json\n\n  {\n    const dumpPath = path.resolve(config.destination, 'index.json');\n    fs.outputFileSync(dumpPath, JSON.stringify(results, null, 2));\n  } // ast, array will be empty if config.outputAST is false - resulting in skipping the loop\n\n  for (const ast of asts) {\n    const json = JSON.stringify(ast.ast, null, 2);\n    const filePath = path.resolve(config.destination, `ast/${ast.filePath}.json`);\n    fs.outputFileSync(filePath, json);\n  } // publish\n\n\n  this._publish(config);\n\n  Plugin.onComplete();\n}\n/**\n * check ESDoc config. and if it is old, exit with warning message.\n * @param {ESDocConfig} config - check config\n * @private\n */"
    },
    {
      "filename": "/home/osboxes/esdoc/src/ESDocCLI.js",
      "startLine": 49,
      "endLine": 49,
      "before": "/**\n * execute to generate document.\n */\nexec() {\n  let config;\n\n  const configPath = this._findConfigFilePath();\n\n  if (configPath) {\n    config = this._createConfigFromJSONFile(configPath);\n  } else {\n    config = this._createConfigFromPackageJSON();\n  }\n\n  if (config) {\n    ESDoc.generate(config);\n  } else {\n    this._showHelp();\n\n    process.exit(1);\n  }\n}\n/**\n * show help of ESDoc\n * @private\n */",
      "after": "/**\n * execute to generate document.\n */\nasync exec() {\n  let config;\n\n  const configPath = this._findConfigFilePath();\n\n  if (configPath) {\n    config = this._createConfigFromJSONFile(configPath);\n  } else {\n    config = this._createConfigFromPackageJSON();\n  }\n\n  if (config) {\n    await ESDoc.generate(config);\n  } else {\n    this._showHelp();\n\n    process.exit(1);\n  }\n}\n/**\n * show help of ESDoc\n * @private\n */"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test-ci.js",
      "startLine": 4,
      "endLine": 4,
      "before": "sh.exec('./script/eslint.js')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec('./script/eslint.js')"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test-ci.js",
      "startLine": 5,
      "endLine": 5,
      "before": "sh.exec('./script/test.js --coverage')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec('./script/test.js --coverage')"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test-ci.js",
      "startLine": 6,
      "endLine": 6,
      "before": "sh.exec('./node_modules/.bin/codecov')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec('./node_modules/.bin/codecov')"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test.js",
      "startLine": 4,
      "endLine": 4,
      "before": "sh.exec('./script/eslint.js')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec('./script/eslint.js')"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test.js",
      "startLine": 18,
      "endLine": 18,
      "before": "sh.exec(`NODE_ENV=coverage ./node_modules/.bin/nyc ./node_modules/mocha/bin/_mocha ${mochaOption}`)",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec(`NODE_ENV=coverage ./node_modules/.bin/nyc ./node_modules/mocha/bin/_mocha ${mochaOption}`)"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test.js",
      "startLine": 20,
      "endLine": 20,
      "before": "sh.exec(`./node_modules/.bin/mocha ${mochaOption}`)",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec(`./node_modules/.bin/mocha ${mochaOption}`)"
    },
    {
      "filename": "/home/osboxes/esdoc/src/ESDocCLI.js",
      "startLine": 159,
      "endLine": 159,
      "before": "cli.exec()",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait cli.exec()"
    },
    {
      "filename": "/home/osboxes/esdoc/test/init.js",
      "startLine": 16,
      "endLine": 16,
      "before": "function cli(configPath) {\n  const cliPath = path.resolve('./src/cli.js');\n  const argv = ['node', cliPath];\n\n  if (configPath) {\n    configPath = path.resolve(configPath);\n    argv.push('-c', configPath);\n    console.log(`== start == ${configPath}`);\n  }\n\n  const cli = new ESDocCLI(argv);\n  cli.exec();\n  console.log(`== finish ==`);\n}",
      "after": "async function cli(configPath) {\n  const cliPath = path.resolve('./src/cli.js');\n  const argv = ['node', cliPath];\n\n  if (configPath) {\n    configPath = path.resolve(configPath);\n    argv.push('-c', configPath);\n    console.log(`== start == ${configPath}`);\n  }\n\n  const cli = new ESDocCLI(argv);\n  await cli.exec();\n  console.log(`== finish ==`);\n}"
    },
    {
      "filename": "/home/osboxes/esdoc/test/init.js",
      "startLine": 20,
      "endLine": 20,
      "before": "cli('./test/integration-test/esdoc.json')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait cli('./test/integration-test/esdoc.json')"
    },
    {
      "filename": "/home/osboxes/esdoc/src/ESDoc.js",
      "startLine": 184,
      "endLine": 184,
      "before": "/**\n * walk recursive in directory.\n * @param {string} dirPath - target directory path.\n * @param {function(entryPath: string)} callback - callback for find file.\n * @private\n */\nstatic _walk(dirPath, callback) {\n  const entries = fs.readdirSync(dirPath);\n\n  for (const entry of entries) {\n    const entryPath = path.resolve(dirPath, entry);\n    const stat = fs.statSync(entryPath);\n\n    if (stat.isFile()) {\n      callback(entryPath);\n    } else if (stat.isDirectory()) {\n      this._walk(entryPath, callback);\n    }\n  }\n}\n/**\n * traverse doc comment in JavaScript file.\n * @param {string} inDirPath - root directory path.\n * @param {string} filePath - target JavaScript file path.\n * @param {string} [packageName] - npm package name of target.\n * @param {string} [mainFilePath] - npm main file path of target.\n * @returns {Object} - return document that is traversed.\n * @property {DocObject[]} results - this is contained JavaScript file.\n * @property {AST} ast - this is AST of JavaScript file.\n * @private\n */",
      "after": "/**\n * walk recursive in directory.\n * @param {string} dirPath - target directory path.\n * @param {function(entryPath: string)} callback - callback for find file.\n * @private\n */\nstatic async _walk(dirPath, callback) {\n  const entries = fs.readdirSync(dirPath);\n\n  for (const entry of entries) {\n    const entryPath = path.resolve(dirPath, entry);\n    const stat = await fs.promises.stat(entryPath);\n\n    if (stat.isFile()) {\n      callback(entryPath);\n    } else if (stat.isDirectory()) {\n      await this._walk(entryPath, callback);\n    }\n  }\n}\n/**\n * traverse doc comment in JavaScript file.\n * @param {string} inDirPath - root directory path.\n * @param {string} filePath - target JavaScript file path.\n * @param {string} [packageName] - npm package name of target.\n * @param {string} [mainFilePath] - npm main file path of target.\n * @returns {Object} - return document that is traversed.\n * @property {DocObject[]} results - this is contained JavaScript file.\n * @property {AST} ast - this is AST of JavaScript file.\n * @private\n */"
    }
  ],
  "4": [
    {
      "filename": "/home/osboxes/esdoc/src/ESDoc.js",
      "startLine": 235,
      "endLine": 235,
      "before": "/**\n * generate index doc\n * @param {ESDocConfig} config\n * @returns {Tag}\n * @private\n */\nstatic _generateForIndex(config) {\n  let indexContent = '';\n\n  if (fs.existsSync(config.index)) {\n    indexContent = fs.readFileSync(config.index, {\n      encode: 'utf8'\n    }).toString();\n  } else {\n    console.log(`\u001b[31mwarning: ${config.index} is not found. Please check config.index.\u001b[0m`);\n  }\n\n  const tag = {\n    kind: 'index',\n    content: indexContent,\n    longname: path.resolve(config.index),\n    name: config.index,\n    static: true,\n    access: 'public'\n  };\n  return tag;\n}\n/**\n * generate package doc\n * @param {ESDocConfig} config\n * @returns {Tag}\n * @private\n */",
      "after": "/**\n * generate index doc\n * @param {ESDocConfig} config\n * @returns {Tag}\n * @private\n */\nstatic async _generateForIndex(config) {\n  let indexContent = '';\n\n  if (fs.existsSync(config.index)) {\n    indexContent = (await fs.promises.readFile(config.index, {\n      encode: 'utf8'\n    })).toString();\n  } else {\n    console.log(`\u001b[31mwarning: ${config.index} is not found. Please check config.index.\u001b[0m`);\n  }\n\n  const tag = {\n    kind: 'index',\n    content: indexContent,\n    longname: path.resolve(config.index),\n    name: config.index,\n    static: true,\n    access: 'public'\n  };\n  return tag;\n}\n/**\n * generate package doc\n * @param {ESDocConfig} config\n * @returns {Tag}\n * @private\n */"
    },
    {
      "filename": "/home/osboxes/esdoc/src/ESDoc.js",
      "startLine": 85,
      "endLine": 85,
      "before": "/**\n * Generate documentation.\n * @param {ESDocConfig} config - config for generation.\n */\nstatic generate(config) {\n  assert(config.source);\n  assert(config.destination);\n\n  this._checkOldConfig(config);\n\n  Plugin.init(config.plugins);\n  Plugin.onStart();\n  config = Plugin.onHandleConfig(config);\n\n  this._setDefaultConfig(config);\n\n  logger.debug = !!config.debug;\n  const includes = config.includes.map(v => new RegExp(v));\n  const excludes = config.excludes.map(v => new RegExp(v));\n  let packageName = null;\n  let mainFilePath = null;\n\n  if (config.package) {\n    try {\n      const packageJSON = fs.readFileSync(config.package, {\n        encode: 'utf8'\n      });\n      const packageConfig = JSON.parse(packageJSON);\n      packageName = packageConfig.name;\n      mainFilePath = packageConfig.main;\n    } catch (e) {// ignore\n    }\n  }\n\n  let results = [];\n  const asts = [];\n  const sourceDirPath = path.resolve(config.source);\n\n  this._walk(config.source, filePath => {\n    const relativeFilePath = path.relative(sourceDirPath, filePath);\n    let match = false;\n\n    for (const reg of includes) {\n      if (relativeFilePath.match(reg)) {\n        match = true;\n        break;\n      }\n    }\n\n    if (!match) return;\n\n    for (const reg of excludes) {\n      if (relativeFilePath.match(reg)) return;\n    }\n\n    console.log(`parse: ${filePath}`);\n\n    const temp = this._traverse(config.source, filePath, packageName, mainFilePath);\n\n    if (!temp) return;\n    results.push(...temp.results);\n\n    if (config.outputAST) {\n      asts.push({\n        filePath: `source${path.sep}${relativeFilePath}`,\n        ast: temp.ast\n      });\n    }\n  }); // config.index\n\n\n  if (config.index) {\n    results.push(this._generateForIndex(config));\n  } // config.package\n\n\n  if (config.package) {\n    results.push(this._generateForPackageJSON(config));\n  }\n\n  results = this._resolveDuplication(results);\n  results = Plugin.onHandleDocs(results); // index.json\n\n  {\n    const dumpPath = path.resolve(config.destination, 'index.json');\n    fs.outputFileSync(dumpPath, JSON.stringify(results, null, 2));\n  } // ast, array will be empty if config.outputAST is false - resulting in skipping the loop\n\n  for (const ast of asts) {\n    const json = JSON.stringify(ast.ast, null, 2);\n    const filePath = path.resolve(config.destination, `ast/${ast.filePath}.json`);\n    fs.outputFileSync(filePath, json);\n  } // publish\n\n\n  this._publish(config);\n\n  Plugin.onComplete();\n}\n/**\n * check ESDoc config. and if it is old, exit with warning message.\n * @param {ESDocConfig} config - check config\n * @private\n */",
      "after": "/**\n * Generate documentation.\n * @param {ESDocConfig} config - config for generation.\n */\nstatic async generate(config) {\n  assert(config.source);\n  assert(config.destination);\n\n  this._checkOldConfig(config);\n\n  Plugin.init(config.plugins);\n  Plugin.onStart();\n  config = Plugin.onHandleConfig(config);\n\n  this._setDefaultConfig(config);\n\n  logger.debug = !!config.debug;\n  const includes = config.includes.map(v => new RegExp(v));\n  const excludes = config.excludes.map(v => new RegExp(v));\n  let packageName = null;\n  let mainFilePath = null;\n\n  if (config.package) {\n    try {\n      const packageJSON = await fs.promises.readFile(config.package, {\n        encode: 'utf8'\n      });\n      const packageConfig = JSON.parse(packageJSON);\n      packageName = packageConfig.name;\n      mainFilePath = packageConfig.main;\n    } catch (e) {// ignore\n    }\n  }\n\n  let results = [];\n  const asts = [];\n  const sourceDirPath = path.resolve(config.source);\n  await this._walk(config.source, filePath => {\n    const relativeFilePath = path.relative(sourceDirPath, filePath);\n    let match = false;\n\n    for (const reg of includes) {\n      if (relativeFilePath.match(reg)) {\n        match = true;\n        break;\n      }\n    }\n\n    if (!match) return;\n\n    for (const reg of excludes) {\n      if (relativeFilePath.match(reg)) return;\n    }\n\n    console.log(`parse: ${filePath}`);\n\n    const temp = this._traverse(config.source, filePath, packageName, mainFilePath);\n\n    if (!temp) return;\n    results.push(...temp.results);\n\n    if (config.outputAST) {\n      asts.push({\n        filePath: `source${path.sep}${relativeFilePath}`,\n        ast: temp.ast\n      });\n    }\n  }); // config.index\n\n  if (config.index) {\n    results.push(await this._generateForIndex(config));\n  } // config.package\n\n\n  if (config.package) {\n    results.push(this._generateForPackageJSON(config));\n  }\n\n  results = this._resolveDuplication(results);\n  results = Plugin.onHandleDocs(results); // index.json\n\n  {\n    const dumpPath = path.resolve(config.destination, 'index.json');\n    fs.outputFileSync(dumpPath, JSON.stringify(results, null, 2));\n  } // ast, array will be empty if config.outputAST is false - resulting in skipping the loop\n\n  for (const ast of asts) {\n    const json = JSON.stringify(ast.ast, null, 2);\n    const filePath = path.resolve(config.destination, `ast/${ast.filePath}.json`);\n    fs.outputFileSync(filePath, json);\n  } // publish\n\n\n  this._publish(config);\n\n  Plugin.onComplete();\n}\n/**\n * check ESDoc config. and if it is old, exit with warning message.\n * @param {ESDocConfig} config - check config\n * @private\n */"
    },
    {
      "filename": "/home/osboxes/esdoc/src/ESDocCLI.js",
      "startLine": 49,
      "endLine": 49,
      "before": "/**\n * execute to generate document.\n */\nexec() {\n  let config;\n\n  const configPath = this._findConfigFilePath();\n\n  if (configPath) {\n    config = this._createConfigFromJSONFile(configPath);\n  } else {\n    config = this._createConfigFromPackageJSON();\n  }\n\n  if (config) {\n    ESDoc.generate(config);\n  } else {\n    this._showHelp();\n\n    process.exit(1);\n  }\n}\n/**\n * show help of ESDoc\n * @private\n */",
      "after": "/**\n * execute to generate document.\n */\nasync exec() {\n  let config;\n\n  const configPath = this._findConfigFilePath();\n\n  if (configPath) {\n    config = this._createConfigFromJSONFile(configPath);\n  } else {\n    config = this._createConfigFromPackageJSON();\n  }\n\n  if (config) {\n    await ESDoc.generate(config);\n  } else {\n    this._showHelp();\n\n    process.exit(1);\n  }\n}\n/**\n * show help of ESDoc\n * @private\n */"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test-ci.js",
      "startLine": 4,
      "endLine": 4,
      "before": "sh.exec('./script/eslint.js')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec('./script/eslint.js')"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test-ci.js",
      "startLine": 5,
      "endLine": 5,
      "before": "sh.exec('./script/test.js --coverage')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec('./script/test.js --coverage')"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test-ci.js",
      "startLine": 6,
      "endLine": 6,
      "before": "sh.exec('./node_modules/.bin/codecov')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec('./node_modules/.bin/codecov')"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test.js",
      "startLine": 4,
      "endLine": 4,
      "before": "sh.exec('./script/eslint.js')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec('./script/eslint.js')"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test.js",
      "startLine": 18,
      "endLine": 18,
      "before": "sh.exec(`NODE_ENV=coverage ./node_modules/.bin/nyc ./node_modules/mocha/bin/_mocha ${mochaOption}`)",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec(`NODE_ENV=coverage ./node_modules/.bin/nyc ./node_modules/mocha/bin/_mocha ${mochaOption}`)"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test.js",
      "startLine": 20,
      "endLine": 20,
      "before": "sh.exec(`./node_modules/.bin/mocha ${mochaOption}`)",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec(`./node_modules/.bin/mocha ${mochaOption}`)"
    },
    {
      "filename": "/home/osboxes/esdoc/src/ESDocCLI.js",
      "startLine": 159,
      "endLine": 159,
      "before": "cli.exec()",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait cli.exec()"
    },
    {
      "filename": "/home/osboxes/esdoc/test/init.js",
      "startLine": 16,
      "endLine": 16,
      "before": "function cli(configPath) {\n  const cliPath = path.resolve('./src/cli.js');\n  const argv = ['node', cliPath];\n\n  if (configPath) {\n    configPath = path.resolve(configPath);\n    argv.push('-c', configPath);\n    console.log(`== start == ${configPath}`);\n  }\n\n  const cli = new ESDocCLI(argv);\n  cli.exec();\n  console.log(`== finish ==`);\n}",
      "after": "async function cli(configPath) {\n  const cliPath = path.resolve('./src/cli.js');\n  const argv = ['node', cliPath];\n\n  if (configPath) {\n    configPath = path.resolve(configPath);\n    argv.push('-c', configPath);\n    console.log(`== start == ${configPath}`);\n  }\n\n  const cli = new ESDocCLI(argv);\n  await cli.exec();\n  console.log(`== finish ==`);\n}"
    },
    {
      "filename": "/home/osboxes/esdoc/test/init.js",
      "startLine": 20,
      "endLine": 20,
      "before": "cli('./test/integration-test/esdoc.json')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait cli('./test/integration-test/esdoc.json')"
    }
  ],
  "5": [
    {
      "filename": "/home/osboxes/esdoc/src/ESDoc.js",
      "startLine": 262,
      "endLine": 262,
      "before": "/**\n * generate package doc\n * @param {ESDocConfig} config\n * @returns {Tag}\n * @private\n */\nstatic _generateForPackageJSON(config) {\n  let packageJSON = '';\n  let packagePath = '';\n\n  try {\n    packageJSON = fs.readFileSync(config.package, {\n      encoding: 'utf-8'\n    });\n    packagePath = path.resolve(config.package);\n  } catch (e) {// ignore\n  }\n\n  const tag = {\n    kind: 'packageJSON',\n    content: packageJSON,\n    longname: packagePath,\n    name: path.basename(packagePath),\n    static: true,\n    access: 'public'\n  };\n  return tag;\n}\n/**\n * resolve duplication docs\n * @param {Tag[]} docs\n * @returns {Tag[]}\n * @private\n */",
      "after": "/**\n * generate package doc\n * @param {ESDocConfig} config\n * @returns {Tag}\n * @private\n */\nstatic async _generateForPackageJSON(config) {\n  let packageJSON = '';\n  let packagePath = '';\n\n  try {\n    packageJSON = await fs.promises.readFile(config.package, {\n      encoding: 'utf-8'\n    });\n    packagePath = path.resolve(config.package);\n  } catch (e) {// ignore\n  }\n\n  const tag = {\n    kind: 'packageJSON',\n    content: packageJSON,\n    longname: packagePath,\n    name: path.basename(packagePath),\n    static: true,\n    access: 'public'\n  };\n  return tag;\n}\n/**\n * resolve duplication docs\n * @param {Tag[]} docs\n * @returns {Tag[]}\n * @private\n */"
    },
    {
      "filename": "/home/osboxes/esdoc/src/ESDoc.js",
      "startLine": 90,
      "endLine": 90,
      "before": "/**\n * Generate documentation.\n * @param {ESDocConfig} config - config for generation.\n */\nstatic generate(config) {\n  assert(config.source);\n  assert(config.destination);\n\n  this._checkOldConfig(config);\n\n  Plugin.init(config.plugins);\n  Plugin.onStart();\n  config = Plugin.onHandleConfig(config);\n\n  this._setDefaultConfig(config);\n\n  logger.debug = !!config.debug;\n  const includes = config.includes.map(v => new RegExp(v));\n  const excludes = config.excludes.map(v => new RegExp(v));\n  let packageName = null;\n  let mainFilePath = null;\n\n  if (config.package) {\n    try {\n      const packageJSON = fs.readFileSync(config.package, {\n        encode: 'utf8'\n      });\n      const packageConfig = JSON.parse(packageJSON);\n      packageName = packageConfig.name;\n      mainFilePath = packageConfig.main;\n    } catch (e) {// ignore\n    }\n  }\n\n  let results = [];\n  const asts = [];\n  const sourceDirPath = path.resolve(config.source);\n\n  this._walk(config.source, filePath => {\n    const relativeFilePath = path.relative(sourceDirPath, filePath);\n    let match = false;\n\n    for (const reg of includes) {\n      if (relativeFilePath.match(reg)) {\n        match = true;\n        break;\n      }\n    }\n\n    if (!match) return;\n\n    for (const reg of excludes) {\n      if (relativeFilePath.match(reg)) return;\n    }\n\n    console.log(`parse: ${filePath}`);\n\n    const temp = this._traverse(config.source, filePath, packageName, mainFilePath);\n\n    if (!temp) return;\n    results.push(...temp.results);\n\n    if (config.outputAST) {\n      asts.push({\n        filePath: `source${path.sep}${relativeFilePath}`,\n        ast: temp.ast\n      });\n    }\n  }); // config.index\n\n\n  if (config.index) {\n    results.push(this._generateForIndex(config));\n  } // config.package\n\n\n  if (config.package) {\n    results.push(this._generateForPackageJSON(config));\n  }\n\n  results = this._resolveDuplication(results);\n  results = Plugin.onHandleDocs(results); // index.json\n\n  {\n    const dumpPath = path.resolve(config.destination, 'index.json');\n    fs.outputFileSync(dumpPath, JSON.stringify(results, null, 2));\n  } // ast, array will be empty if config.outputAST is false - resulting in skipping the loop\n\n  for (const ast of asts) {\n    const json = JSON.stringify(ast.ast, null, 2);\n    const filePath = path.resolve(config.destination, `ast/${ast.filePath}.json`);\n    fs.outputFileSync(filePath, json);\n  } // publish\n\n\n  this._publish(config);\n\n  Plugin.onComplete();\n}\n/**\n * check ESDoc config. and if it is old, exit with warning message.\n * @param {ESDocConfig} config - check config\n * @private\n */",
      "after": "/**\n * Generate documentation.\n * @param {ESDocConfig} config - config for generation.\n */\nstatic async generate(config) {\n  assert(config.source);\n  assert(config.destination);\n\n  this._checkOldConfig(config);\n\n  Plugin.init(config.plugins);\n  Plugin.onStart();\n  config = Plugin.onHandleConfig(config);\n\n  this._setDefaultConfig(config);\n\n  logger.debug = !!config.debug;\n  const includes = config.includes.map(v => new RegExp(v));\n  const excludes = config.excludes.map(v => new RegExp(v));\n  let packageName = null;\n  let mainFilePath = null;\n\n  if (config.package) {\n    try {\n      const packageJSON = await fs.promises.readFile(config.package, {\n        encode: 'utf8'\n      });\n      const packageConfig = JSON.parse(packageJSON);\n      packageName = packageConfig.name;\n      mainFilePath = packageConfig.main;\n    } catch (e) {// ignore\n    }\n  }\n\n  let results = [];\n  const asts = [];\n  const sourceDirPath = path.resolve(config.source);\n  await this._walk(config.source, filePath => {\n    const relativeFilePath = path.relative(sourceDirPath, filePath);\n    let match = false;\n\n    for (const reg of includes) {\n      if (relativeFilePath.match(reg)) {\n        match = true;\n        break;\n      }\n    }\n\n    if (!match) return;\n\n    for (const reg of excludes) {\n      if (relativeFilePath.match(reg)) return;\n    }\n\n    console.log(`parse: ${filePath}`);\n\n    const temp = this._traverse(config.source, filePath, packageName, mainFilePath);\n\n    if (!temp) return;\n    results.push(...temp.results);\n\n    if (config.outputAST) {\n      asts.push({\n        filePath: `source${path.sep}${relativeFilePath}`,\n        ast: temp.ast\n      });\n    }\n  }); // config.index\n\n  if (config.index) {\n    results.push(await this._generateForIndex(config));\n  } // config.package\n\n\n  if (config.package) {\n    results.push(await this._generateForPackageJSON(config));\n  }\n\n  results = this._resolveDuplication(results);\n  results = Plugin.onHandleDocs(results); // index.json\n\n  {\n    const dumpPath = path.resolve(config.destination, 'index.json');\n    fs.outputFileSync(dumpPath, JSON.stringify(results, null, 2));\n  } // ast, array will be empty if config.outputAST is false - resulting in skipping the loop\n\n  for (const ast of asts) {\n    const json = JSON.stringify(ast.ast, null, 2);\n    const filePath = path.resolve(config.destination, `ast/${ast.filePath}.json`);\n    fs.outputFileSync(filePath, json);\n  } // publish\n\n\n  this._publish(config);\n\n  Plugin.onComplete();\n}\n/**\n * check ESDoc config. and if it is old, exit with warning message.\n * @param {ESDocConfig} config - check config\n * @private\n */"
    },
    {
      "filename": "/home/osboxes/esdoc/src/ESDocCLI.js",
      "startLine": 49,
      "endLine": 49,
      "before": "/**\n * execute to generate document.\n */\nexec() {\n  let config;\n\n  const configPath = this._findConfigFilePath();\n\n  if (configPath) {\n    config = this._createConfigFromJSONFile(configPath);\n  } else {\n    config = this._createConfigFromPackageJSON();\n  }\n\n  if (config) {\n    ESDoc.generate(config);\n  } else {\n    this._showHelp();\n\n    process.exit(1);\n  }\n}\n/**\n * show help of ESDoc\n * @private\n */",
      "after": "/**\n * execute to generate document.\n */\nasync exec() {\n  let config;\n\n  const configPath = this._findConfigFilePath();\n\n  if (configPath) {\n    config = this._createConfigFromJSONFile(configPath);\n  } else {\n    config = this._createConfigFromPackageJSON();\n  }\n\n  if (config) {\n    await ESDoc.generate(config);\n  } else {\n    this._showHelp();\n\n    process.exit(1);\n  }\n}\n/**\n * show help of ESDoc\n * @private\n */"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test-ci.js",
      "startLine": 4,
      "endLine": 4,
      "before": "sh.exec('./script/eslint.js')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec('./script/eslint.js')"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test-ci.js",
      "startLine": 5,
      "endLine": 5,
      "before": "sh.exec('./script/test.js --coverage')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec('./script/test.js --coverage')"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test-ci.js",
      "startLine": 6,
      "endLine": 6,
      "before": "sh.exec('./node_modules/.bin/codecov')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec('./node_modules/.bin/codecov')"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test.js",
      "startLine": 4,
      "endLine": 4,
      "before": "sh.exec('./script/eslint.js')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec('./script/eslint.js')"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test.js",
      "startLine": 18,
      "endLine": 18,
      "before": "sh.exec(`NODE_ENV=coverage ./node_modules/.bin/nyc ./node_modules/mocha/bin/_mocha ${mochaOption}`)",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec(`NODE_ENV=coverage ./node_modules/.bin/nyc ./node_modules/mocha/bin/_mocha ${mochaOption}`)"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test.js",
      "startLine": 20,
      "endLine": 20,
      "before": "sh.exec(`./node_modules/.bin/mocha ${mochaOption}`)",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec(`./node_modules/.bin/mocha ${mochaOption}`)"
    },
    {
      "filename": "/home/osboxes/esdoc/src/ESDocCLI.js",
      "startLine": 159,
      "endLine": 159,
      "before": "cli.exec()",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait cli.exec()"
    },
    {
      "filename": "/home/osboxes/esdoc/test/init.js",
      "startLine": 16,
      "endLine": 16,
      "before": "function cli(configPath) {\n  const cliPath = path.resolve('./src/cli.js');\n  const argv = ['node', cliPath];\n\n  if (configPath) {\n    configPath = path.resolve(configPath);\n    argv.push('-c', configPath);\n    console.log(`== start == ${configPath}`);\n  }\n\n  const cli = new ESDocCLI(argv);\n  cli.exec();\n  console.log(`== finish ==`);\n}",
      "after": "async function cli(configPath) {\n  const cliPath = path.resolve('./src/cli.js');\n  const argv = ['node', cliPath];\n\n  if (configPath) {\n    configPath = path.resolve(configPath);\n    argv.push('-c', configPath);\n    console.log(`== start == ${configPath}`);\n  }\n\n  const cli = new ESDocCLI(argv);\n  await cli.exec();\n  console.log(`== finish ==`);\n}"
    },
    {
      "filename": "/home/osboxes/esdoc/test/init.js",
      "startLine": 20,
      "endLine": 20,
      "before": "cli('./test/integration-test/esdoc.json')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait cli('./test/integration-test/esdoc.json')"
    }
  ],
  "6": [
    {
      "filename": "/home/osboxes/esdoc/src/ESDoc.js",
      "startLine": 337,
      "endLine": 337,
      "before": "filePath => {\n  const _filePath = path.resolve(config.destination, filePath);\n\n  return fs.readFileSync(_filePath).toString();\n}",
      "after": "async filePath => {\n  const _filePath = path.resolve(config.destination, filePath);\n\n  return (await fs.promises.readFile(_filePath)).toString();\n}"
    },
    {
      "filename": "/home/osboxes/esdoc/src/ESDoc.js",
      "startLine": 111,
      "endLine": 111,
      "before": "/**\n * Generate documentation.\n * @param {ESDocConfig} config - config for generation.\n */\nstatic generate(config) {\n  assert(config.source);\n  assert(config.destination);\n\n  this._checkOldConfig(config);\n\n  Plugin.init(config.plugins);\n  Plugin.onStart();\n  config = Plugin.onHandleConfig(config);\n\n  this._setDefaultConfig(config);\n\n  logger.debug = !!config.debug;\n  const includes = config.includes.map(v => new RegExp(v));\n  const excludes = config.excludes.map(v => new RegExp(v));\n  let packageName = null;\n  let mainFilePath = null;\n\n  if (config.package) {\n    try {\n      const packageJSON = fs.readFileSync(config.package, {\n        encode: 'utf8'\n      });\n      const packageConfig = JSON.parse(packageJSON);\n      packageName = packageConfig.name;\n      mainFilePath = packageConfig.main;\n    } catch (e) {// ignore\n    }\n  }\n\n  let results = [];\n  const asts = [];\n  const sourceDirPath = path.resolve(config.source);\n\n  this._walk(config.source, filePath => {\n    const relativeFilePath = path.relative(sourceDirPath, filePath);\n    let match = false;\n\n    for (const reg of includes) {\n      if (relativeFilePath.match(reg)) {\n        match = true;\n        break;\n      }\n    }\n\n    if (!match) return;\n\n    for (const reg of excludes) {\n      if (relativeFilePath.match(reg)) return;\n    }\n\n    console.log(`parse: ${filePath}`);\n\n    const temp = this._traverse(config.source, filePath, packageName, mainFilePath);\n\n    if (!temp) return;\n    results.push(...temp.results);\n\n    if (config.outputAST) {\n      asts.push({\n        filePath: `source${path.sep}${relativeFilePath}`,\n        ast: temp.ast\n      });\n    }\n  }); // config.index\n\n\n  if (config.index) {\n    results.push(this._generateForIndex(config));\n  } // config.package\n\n\n  if (config.package) {\n    results.push(this._generateForPackageJSON(config));\n  }\n\n  results = this._resolveDuplication(results);\n  results = Plugin.onHandleDocs(results); // index.json\n\n  {\n    const dumpPath = path.resolve(config.destination, 'index.json');\n    fs.outputFileSync(dumpPath, JSON.stringify(results, null, 2));\n  } // ast, array will be empty if config.outputAST is false - resulting in skipping the loop\n\n  for (const ast of asts) {\n    const json = JSON.stringify(ast.ast, null, 2);\n    const filePath = path.resolve(config.destination, `ast/${ast.filePath}.json`);\n    fs.outputFileSync(filePath, json);\n  } // publish\n\n\n  this._publish(config);\n\n  Plugin.onComplete();\n}\n/**\n * check ESDoc config. and if it is old, exit with warning message.\n * @param {ESDocConfig} config - check config\n * @private\n */",
      "after": "/**\n * Generate documentation.\n * @param {ESDocConfig} config - config for generation.\n */\nstatic async generate(config) {\n  assert(config.source);\n  assert(config.destination);\n\n  this._checkOldConfig(config);\n\n  Plugin.init(config.plugins);\n  Plugin.onStart();\n  config = Plugin.onHandleConfig(config);\n\n  this._setDefaultConfig(config);\n\n  logger.debug = !!config.debug;\n  const includes = config.includes.map(v => new RegExp(v));\n  const excludes = config.excludes.map(v => new RegExp(v));\n  let packageName = null;\n  let mainFilePath = null;\n\n  if (config.package) {\n    try {\n      const packageJSON = await fs.promises.readFile(config.package, {\n        encode: 'utf8'\n      });\n      const packageConfig = JSON.parse(packageJSON);\n      packageName = packageConfig.name;\n      mainFilePath = packageConfig.main;\n    } catch (e) {// ignore\n    }\n  }\n\n  let results = [];\n  const asts = [];\n  const sourceDirPath = path.resolve(config.source);\n  await this._walk(config.source, filePath => {\n    const relativeFilePath = path.relative(sourceDirPath, filePath);\n    let match = false;\n\n    for (const reg of includes) {\n      if (relativeFilePath.match(reg)) {\n        match = true;\n        break;\n      }\n    }\n\n    if (!match) return;\n\n    for (const reg of excludes) {\n      if (relativeFilePath.match(reg)) return;\n    }\n\n    console.log(`parse: ${filePath}`);\n\n    const temp = this._traverse(config.source, filePath, packageName, mainFilePath);\n\n    if (!temp) return;\n    results.push(...temp.results);\n\n    if (config.outputAST) {\n      asts.push({\n        filePath: `source${path.sep}${relativeFilePath}`,\n        ast: temp.ast\n      });\n    }\n  }); // config.index\n\n  if (config.index) {\n    results.push(await this._generateForIndex(config));\n  } // config.package\n\n\n  if (config.package) {\n    results.push(await this._generateForPackageJSON(config));\n  }\n\n  results = this._resolveDuplication(results);\n  results = Plugin.onHandleDocs(results); // index.json\n\n  {\n    const dumpPath = path.resolve(config.destination, 'index.json');\n    fs.outputFileSync(dumpPath, JSON.stringify(results, null, 2));\n  } // ast, array will be empty if config.outputAST is false - resulting in skipping the loop\n\n  for (const ast of asts) {\n    const json = JSON.stringify(ast.ast, null, 2);\n    const filePath = path.resolve(config.destination, `ast/${ast.filePath}.json`);\n    fs.outputFileSync(filePath, json);\n  } // publish\n\n\n  await this._publish(config);\n  Plugin.onComplete();\n}\n/**\n * check ESDoc config. and if it is old, exit with warning message.\n * @param {ESDocConfig} config - check config\n * @private\n */"
    },
    {
      "filename": "/home/osboxes/esdoc/src/ESDocCLI.js",
      "startLine": 49,
      "endLine": 49,
      "before": "/**\n * execute to generate document.\n */\nexec() {\n  let config;\n\n  const configPath = this._findConfigFilePath();\n\n  if (configPath) {\n    config = this._createConfigFromJSONFile(configPath);\n  } else {\n    config = this._createConfigFromPackageJSON();\n  }\n\n  if (config) {\n    ESDoc.generate(config);\n  } else {\n    this._showHelp();\n\n    process.exit(1);\n  }\n}\n/**\n * show help of ESDoc\n * @private\n */",
      "after": "/**\n * execute to generate document.\n */\nasync exec() {\n  let config;\n\n  const configPath = this._findConfigFilePath();\n\n  if (configPath) {\n    config = this._createConfigFromJSONFile(configPath);\n  } else {\n    config = this._createConfigFromPackageJSON();\n  }\n\n  if (config) {\n    await ESDoc.generate(config);\n  } else {\n    this._showHelp();\n\n    process.exit(1);\n  }\n}\n/**\n * show help of ESDoc\n * @private\n */"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test-ci.js",
      "startLine": 4,
      "endLine": 4,
      "before": "sh.exec('./script/eslint.js')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec('./script/eslint.js')"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test-ci.js",
      "startLine": 5,
      "endLine": 5,
      "before": "sh.exec('./script/test.js --coverage')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec('./script/test.js --coverage')"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test-ci.js",
      "startLine": 6,
      "endLine": 6,
      "before": "sh.exec('./node_modules/.bin/codecov')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec('./node_modules/.bin/codecov')"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test.js",
      "startLine": 4,
      "endLine": 4,
      "before": "sh.exec('./script/eslint.js')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec('./script/eslint.js')"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test.js",
      "startLine": 18,
      "endLine": 18,
      "before": "sh.exec(`NODE_ENV=coverage ./node_modules/.bin/nyc ./node_modules/mocha/bin/_mocha ${mochaOption}`)",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec(`NODE_ENV=coverage ./node_modules/.bin/nyc ./node_modules/mocha/bin/_mocha ${mochaOption}`)"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test.js",
      "startLine": 20,
      "endLine": 20,
      "before": "sh.exec(`./node_modules/.bin/mocha ${mochaOption}`)",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec(`./node_modules/.bin/mocha ${mochaOption}`)"
    },
    {
      "filename": "/home/osboxes/esdoc/src/ESDocCLI.js",
      "startLine": 159,
      "endLine": 159,
      "before": "cli.exec()",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait cli.exec()"
    },
    {
      "filename": "/home/osboxes/esdoc/test/init.js",
      "startLine": 16,
      "endLine": 16,
      "before": "function cli(configPath) {\n  const cliPath = path.resolve('./src/cli.js');\n  const argv = ['node', cliPath];\n\n  if (configPath) {\n    configPath = path.resolve(configPath);\n    argv.push('-c', configPath);\n    console.log(`== start == ${configPath}`);\n  }\n\n  const cli = new ESDocCLI(argv);\n  cli.exec();\n  console.log(`== finish ==`);\n}",
      "after": "async function cli(configPath) {\n  const cliPath = path.resolve('./src/cli.js');\n  const argv = ['node', cliPath];\n\n  if (configPath) {\n    configPath = path.resolve(configPath);\n    argv.push('-c', configPath);\n    console.log(`== start == ${configPath}`);\n  }\n\n  const cli = new ESDocCLI(argv);\n  await cli.exec();\n  console.log(`== finish ==`);\n}"
    },
    {
      "filename": "/home/osboxes/esdoc/test/init.js",
      "startLine": 20,
      "endLine": 20,
      "before": "cli('./test/integration-test/esdoc.json')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait cli('./test/integration-test/esdoc.json')"
    }
  ],
  "7": [
    {
      "filename": "/home/osboxes/esdoc/src/ESDocCLI.js",
      "startLine": 100,
      "endLine": 100,
      "before": "/**\n * find ESDoc config file.\n * @returns {string|null} config file path.\n * @private\n */\n_findConfigFilePath() {\n  if (this._argv.c) {\n    return this._argv.c;\n  }\n\n  try {\n    const filePath = path.resolve('./.esdoc.json');\n    fs.readFileSync(filePath);\n    return filePath;\n  } catch (e) {// ignore\n  }\n\n  try {\n    const filePath = path.resolve('./.esdoc.js');\n    fs.readFileSync(filePath);\n    return filePath;\n  } catch (e) {// ignore\n  }\n\n  return null;\n}\n/**\n * create config object from config file.\n * @param {string} configFilePath - config file path.\n * @return {ESDocConfig} config object.\n * @private\n */",
      "after": "/**\n * find ESDoc config file.\n * @returns {string|null} config file path.\n * @private\n */\nasync _findConfigFilePath() {\n  if (this._argv.c) {\n    return this._argv.c;\n  }\n\n  try {\n    const filePath = path.resolve('./.esdoc.json');\n    await fs.promises.readFile(filePath);\n    return filePath;\n  } catch (e) {// ignore\n  }\n\n  try {\n    const filePath = path.resolve('./.esdoc.js');\n    fs.readFileSync(filePath);\n    return filePath;\n  } catch (e) {// ignore\n  }\n\n  return null;\n}\n/**\n * create config object from config file.\n * @param {string} configFilePath - config file path.\n * @return {ESDocConfig} config object.\n * @private\n */"
    },
    {
      "filename": "/home/osboxes/esdoc/src/ESDocCLI.js",
      "startLine": 41,
      "endLine": 41,
      "before": "/**\n * execute to generate document.\n */\nexec() {\n  let config;\n\n  const configPath = this._findConfigFilePath();\n\n  if (configPath) {\n    config = this._createConfigFromJSONFile(configPath);\n  } else {\n    config = this._createConfigFromPackageJSON();\n  }\n\n  if (config) {\n    ESDoc.generate(config);\n  } else {\n    this._showHelp();\n\n    process.exit(1);\n  }\n}\n/**\n * show help of ESDoc\n * @private\n */",
      "after": "/**\n * execute to generate document.\n */\nasync exec() {\n  let config;\n  const configPath = await this._findConfigFilePath();\n\n  if (configPath) {\n    config = this._createConfigFromJSONFile(configPath);\n  } else {\n    config = this._createConfigFromPackageJSON();\n  }\n\n  if (config) {\n    await ESDoc.generate(config);\n  } else {\n    this._showHelp();\n\n    process.exit(1);\n  }\n}\n/**\n * show help of ESDoc\n * @private\n */"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test-ci.js",
      "startLine": 4,
      "endLine": 4,
      "before": "sh.exec('./script/eslint.js')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec('./script/eslint.js')"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test-ci.js",
      "startLine": 5,
      "endLine": 5,
      "before": "sh.exec('./script/test.js --coverage')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec('./script/test.js --coverage')"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test-ci.js",
      "startLine": 6,
      "endLine": 6,
      "before": "sh.exec('./node_modules/.bin/codecov')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec('./node_modules/.bin/codecov')"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test.js",
      "startLine": 4,
      "endLine": 4,
      "before": "sh.exec('./script/eslint.js')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec('./script/eslint.js')"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test.js",
      "startLine": 18,
      "endLine": 18,
      "before": "sh.exec(`NODE_ENV=coverage ./node_modules/.bin/nyc ./node_modules/mocha/bin/_mocha ${mochaOption}`)",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec(`NODE_ENV=coverage ./node_modules/.bin/nyc ./node_modules/mocha/bin/_mocha ${mochaOption}`)"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test.js",
      "startLine": 20,
      "endLine": 20,
      "before": "sh.exec(`./node_modules/.bin/mocha ${mochaOption}`)",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec(`./node_modules/.bin/mocha ${mochaOption}`)"
    },
    {
      "filename": "/home/osboxes/esdoc/src/ESDocCLI.js",
      "startLine": 159,
      "endLine": 159,
      "before": "cli.exec()",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait cli.exec()"
    },
    {
      "filename": "/home/osboxes/esdoc/test/init.js",
      "startLine": 16,
      "endLine": 16,
      "before": "function cli(configPath) {\n  const cliPath = path.resolve('./src/cli.js');\n  const argv = ['node', cliPath];\n\n  if (configPath) {\n    configPath = path.resolve(configPath);\n    argv.push('-c', configPath);\n    console.log(`== start == ${configPath}`);\n  }\n\n  const cli = new ESDocCLI(argv);\n  cli.exec();\n  console.log(`== finish ==`);\n}",
      "after": "async function cli(configPath) {\n  const cliPath = path.resolve('./src/cli.js');\n  const argv = ['node', cliPath];\n\n  if (configPath) {\n    configPath = path.resolve(configPath);\n    argv.push('-c', configPath);\n    console.log(`== start == ${configPath}`);\n  }\n\n  const cli = new ESDocCLI(argv);\n  await cli.exec();\n  console.log(`== finish ==`);\n}"
    },
    {
      "filename": "/home/osboxes/esdoc/test/init.js",
      "startLine": 20,
      "endLine": 20,
      "before": "cli('./test/integration-test/esdoc.json')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait cli('./test/integration-test/esdoc.json')"
    },
    {
      "filename": "/home/osboxes/esdoc/test/unit-test/ESDocCLI.test.js",
      "startLine": 30,
      "endLine": 30,
      "before": "() => {\n  const cli = new ESDocCLI([null, null, '-c', 'esdoc.json']);\n  assert.equal(cli._findConfigFilePath(), 'esdoc.json');\n}",
      "after": "async () => {\n  const cli = new ESDocCLI([null, null, '-c', 'esdoc.json']);\n  assert.equal(await cli._findConfigFilePath(), 'esdoc.json');\n}"
    },
    {
      "filename": "/home/osboxes/esdoc/test/unit-test/ESDocCLI.test.js",
      "startLine": 37,
      "endLine": 37,
      "before": "() => {\n  process.chdir('./test/');\n  fs.writeFileSync('.esdoc.json', 'dummy');\n  const cli = new ESDocCLI([null, null]);\n  assert.equal(cli._findConfigFilePath(), path.resolve('.esdoc.json'));\n  fs.unlinkSync('.esdoc.json');\n  process.chdir('../');\n}",
      "after": "async () => {\n  process.chdir('./test/');\n  fs.writeFileSync('.esdoc.json', 'dummy');\n  const cli = new ESDocCLI([null, null]);\n  assert.equal(await cli._findConfigFilePath(), path.resolve('.esdoc.json'));\n  fs.unlinkSync('.esdoc.json');\n  process.chdir('../');\n}"
    },
    {
      "filename": "/home/osboxes/esdoc/test/unit-test/ESDocCLI.test.js",
      "startLine": 46,
      "endLine": 46,
      "before": "() => {\n  process.chdir('./test/');\n  fs.writeFileSync('.esdoc.js', 'dummy');\n  const cli = new ESDocCLI([null, null]);\n  assert.equal(cli._findConfigFilePath(), path.resolve('.esdoc.js'));\n  fs.unlinkSync('.esdoc.js');\n  process.chdir('../');\n}",
      "after": "async () => {\n  process.chdir('./test/');\n  fs.writeFileSync('.esdoc.js', 'dummy');\n  const cli = new ESDocCLI([null, null]);\n  assert.equal(await cli._findConfigFilePath(), path.resolve('.esdoc.js'));\n  fs.unlinkSync('.esdoc.js');\n  process.chdir('../');\n}"
    }
  ],
  "8": [
    {
      "filename": "/home/osboxes/esdoc/src/ESDocCLI.js",
      "startLine": 108,
      "endLine": 108,
      "before": "/**\n * find ESDoc config file.\n * @returns {string|null} config file path.\n * @private\n */\n_findConfigFilePath() {\n  if (this._argv.c) {\n    return this._argv.c;\n  }\n\n  try {\n    const filePath = path.resolve('./.esdoc.json');\n    fs.readFileSync(filePath);\n    return filePath;\n  } catch (e) {// ignore\n  }\n\n  try {\n    const filePath = path.resolve('./.esdoc.js');\n    fs.readFileSync(filePath);\n    return filePath;\n  } catch (e) {// ignore\n  }\n\n  return null;\n}\n/**\n * create config object from config file.\n * @param {string} configFilePath - config file path.\n * @return {ESDocConfig} config object.\n * @private\n */",
      "after": "/**\n * find ESDoc config file.\n * @returns {string|null} config file path.\n * @private\n */\nasync _findConfigFilePath() {\n  if (this._argv.c) {\n    return this._argv.c;\n  }\n\n  try {\n    const filePath = path.resolve('./.esdoc.json');\n    await fs.promises.readFile(filePath);\n    return filePath;\n  } catch (e) {// ignore\n  }\n\n  try {\n    const filePath = path.resolve('./.esdoc.js');\n    await fs.promises.readFile(filePath);\n    return filePath;\n  } catch (e) {// ignore\n  }\n\n  return null;\n}\n/**\n * create config object from config file.\n * @param {string} configFilePath - config file path.\n * @return {ESDocConfig} config object.\n * @private\n */"
    },
    {
      "filename": "/home/osboxes/esdoc/src/ESDocCLI.js",
      "startLine": 41,
      "endLine": 41,
      "before": "/**\n * execute to generate document.\n */\nexec() {\n  let config;\n\n  const configPath = this._findConfigFilePath();\n\n  if (configPath) {\n    config = this._createConfigFromJSONFile(configPath);\n  } else {\n    config = this._createConfigFromPackageJSON();\n  }\n\n  if (config) {\n    ESDoc.generate(config);\n  } else {\n    this._showHelp();\n\n    process.exit(1);\n  }\n}\n/**\n * show help of ESDoc\n * @private\n */",
      "after": "/**\n * execute to generate document.\n */\nasync exec() {\n  let config;\n  const configPath = await this._findConfigFilePath();\n\n  if (configPath) {\n    config = this._createConfigFromJSONFile(configPath);\n  } else {\n    config = this._createConfigFromPackageJSON();\n  }\n\n  if (config) {\n    await ESDoc.generate(config);\n  } else {\n    this._showHelp();\n\n    process.exit(1);\n  }\n}\n/**\n * show help of ESDoc\n * @private\n */"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test-ci.js",
      "startLine": 4,
      "endLine": 4,
      "before": "sh.exec('./script/eslint.js')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec('./script/eslint.js')"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test-ci.js",
      "startLine": 5,
      "endLine": 5,
      "before": "sh.exec('./script/test.js --coverage')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec('./script/test.js --coverage')"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test-ci.js",
      "startLine": 6,
      "endLine": 6,
      "before": "sh.exec('./node_modules/.bin/codecov')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec('./node_modules/.bin/codecov')"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test.js",
      "startLine": 4,
      "endLine": 4,
      "before": "sh.exec('./script/eslint.js')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec('./script/eslint.js')"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test.js",
      "startLine": 18,
      "endLine": 18,
      "before": "sh.exec(`NODE_ENV=coverage ./node_modules/.bin/nyc ./node_modules/mocha/bin/_mocha ${mochaOption}`)",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec(`NODE_ENV=coverage ./node_modules/.bin/nyc ./node_modules/mocha/bin/_mocha ${mochaOption}`)"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test.js",
      "startLine": 20,
      "endLine": 20,
      "before": "sh.exec(`./node_modules/.bin/mocha ${mochaOption}`)",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec(`./node_modules/.bin/mocha ${mochaOption}`)"
    },
    {
      "filename": "/home/osboxes/esdoc/src/ESDocCLI.js",
      "startLine": 159,
      "endLine": 159,
      "before": "cli.exec()",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait cli.exec()"
    },
    {
      "filename": "/home/osboxes/esdoc/test/init.js",
      "startLine": 16,
      "endLine": 16,
      "before": "function cli(configPath) {\n  const cliPath = path.resolve('./src/cli.js');\n  const argv = ['node', cliPath];\n\n  if (configPath) {\n    configPath = path.resolve(configPath);\n    argv.push('-c', configPath);\n    console.log(`== start == ${configPath}`);\n  }\n\n  const cli = new ESDocCLI(argv);\n  cli.exec();\n  console.log(`== finish ==`);\n}",
      "after": "async function cli(configPath) {\n  const cliPath = path.resolve('./src/cli.js');\n  const argv = ['node', cliPath];\n\n  if (configPath) {\n    configPath = path.resolve(configPath);\n    argv.push('-c', configPath);\n    console.log(`== start == ${configPath}`);\n  }\n\n  const cli = new ESDocCLI(argv);\n  await cli.exec();\n  console.log(`== finish ==`);\n}"
    },
    {
      "filename": "/home/osboxes/esdoc/test/init.js",
      "startLine": 20,
      "endLine": 20,
      "before": "cli('./test/integration-test/esdoc.json')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait cli('./test/integration-test/esdoc.json')"
    },
    {
      "filename": "/home/osboxes/esdoc/test/unit-test/ESDocCLI.test.js",
      "startLine": 30,
      "endLine": 30,
      "before": "() => {\n  const cli = new ESDocCLI([null, null, '-c', 'esdoc.json']);\n  assert.equal(cli._findConfigFilePath(), 'esdoc.json');\n}",
      "after": "async () => {\n  const cli = new ESDocCLI([null, null, '-c', 'esdoc.json']);\n  assert.equal(await cli._findConfigFilePath(), 'esdoc.json');\n}"
    },
    {
      "filename": "/home/osboxes/esdoc/test/unit-test/ESDocCLI.test.js",
      "startLine": 37,
      "endLine": 37,
      "before": "() => {\n  process.chdir('./test/');\n  fs.writeFileSync('.esdoc.json', 'dummy');\n  const cli = new ESDocCLI([null, null]);\n  assert.equal(cli._findConfigFilePath(), path.resolve('.esdoc.json'));\n  fs.unlinkSync('.esdoc.json');\n  process.chdir('../');\n}",
      "after": "async () => {\n  process.chdir('./test/');\n  fs.writeFileSync('.esdoc.json', 'dummy');\n  const cli = new ESDocCLI([null, null]);\n  assert.equal(await cli._findConfigFilePath(), path.resolve('.esdoc.json'));\n  fs.unlinkSync('.esdoc.json');\n  process.chdir('../');\n}"
    },
    {
      "filename": "/home/osboxes/esdoc/test/unit-test/ESDocCLI.test.js",
      "startLine": 46,
      "endLine": 46,
      "before": "() => {\n  process.chdir('./test/');\n  fs.writeFileSync('.esdoc.js', 'dummy');\n  const cli = new ESDocCLI([null, null]);\n  assert.equal(cli._findConfigFilePath(), path.resolve('.esdoc.js'));\n  fs.unlinkSync('.esdoc.js');\n  process.chdir('../');\n}",
      "after": "async () => {\n  process.chdir('./test/');\n  fs.writeFileSync('.esdoc.js', 'dummy');\n  const cli = new ESDocCLI([null, null]);\n  assert.equal(await cli._findConfigFilePath(), path.resolve('.esdoc.js'));\n  fs.unlinkSync('.esdoc.js');\n  process.chdir('../');\n}"
    }
  ],
  "9": [
    {
      "filename": "/home/osboxes/esdoc/src/ESDocCLI.js",
      "startLine": 130,
      "endLine": 130,
      "before": "/**\n * create config object from config file.\n * @param {string} configFilePath - config file path.\n * @return {ESDocConfig} config object.\n * @private\n */\n_createConfigFromJSONFile(configFilePath) {\n  configFilePath = path.resolve(configFilePath);\n  const ext = path.extname(configFilePath);\n\n  if (ext === '.js') {\n    /* eslint-disable global-require */\n    return require(configFilePath);\n  } else {\n    const configJSON = fs.readFileSync(configFilePath, {\n      encode: 'utf8'\n    });\n    const config = JSON.parse(configJSON);\n    return config;\n  }\n}\n/**\n * create config object from package.json.\n * @return {ESDocConfig|null} config object.\n * @private\n */",
      "after": "/**\n * create config object from config file.\n * @param {string} configFilePath - config file path.\n * @return {ESDocConfig} config object.\n * @private\n */\nasync _createConfigFromJSONFile(configFilePath) {\n  configFilePath = path.resolve(configFilePath);\n  const ext = path.extname(configFilePath);\n\n  if (ext === '.js') {\n    /* eslint-disable global-require */\n    return require(configFilePath);\n  } else {\n    const configJSON = await fs.promises.readFile(configFilePath, {\n      encode: 'utf8'\n    });\n    const config = JSON.parse(configJSON);\n    return config;\n  }\n}\n/**\n * create config object from package.json.\n * @return {ESDocConfig|null} config object.\n * @private\n */"
    },
    {
      "filename": "/home/osboxes/esdoc/src/ESDocCLI.js",
      "startLine": 43,
      "endLine": 43,
      "before": "/**\n * execute to generate document.\n */\nexec() {\n  let config;\n\n  const configPath = this._findConfigFilePath();\n\n  if (configPath) {\n    config = this._createConfigFromJSONFile(configPath);\n  } else {\n    config = this._createConfigFromPackageJSON();\n  }\n\n  if (config) {\n    ESDoc.generate(config);\n  } else {\n    this._showHelp();\n\n    process.exit(1);\n  }\n}\n/**\n * show help of ESDoc\n * @private\n */",
      "after": "/**\n * execute to generate document.\n */\nasync exec() {\n  let config;\n  const configPath = await this._findConfigFilePath();\n\n  if (configPath) {\n    config = await this._createConfigFromJSONFile(configPath);\n  } else {\n    config = this._createConfigFromPackageJSON();\n  }\n\n  if (config) {\n    await ESDoc.generate(config);\n  } else {\n    this._showHelp();\n\n    process.exit(1);\n  }\n}\n/**\n * show help of ESDoc\n * @private\n */"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test-ci.js",
      "startLine": 4,
      "endLine": 4,
      "before": "sh.exec('./script/eslint.js')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec('./script/eslint.js')"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test-ci.js",
      "startLine": 5,
      "endLine": 5,
      "before": "sh.exec('./script/test.js --coverage')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec('./script/test.js --coverage')"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test-ci.js",
      "startLine": 6,
      "endLine": 6,
      "before": "sh.exec('./node_modules/.bin/codecov')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec('./node_modules/.bin/codecov')"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test.js",
      "startLine": 4,
      "endLine": 4,
      "before": "sh.exec('./script/eslint.js')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec('./script/eslint.js')"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test.js",
      "startLine": 18,
      "endLine": 18,
      "before": "sh.exec(`NODE_ENV=coverage ./node_modules/.bin/nyc ./node_modules/mocha/bin/_mocha ${mochaOption}`)",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec(`NODE_ENV=coverage ./node_modules/.bin/nyc ./node_modules/mocha/bin/_mocha ${mochaOption}`)"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test.js",
      "startLine": 20,
      "endLine": 20,
      "before": "sh.exec(`./node_modules/.bin/mocha ${mochaOption}`)",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec(`./node_modules/.bin/mocha ${mochaOption}`)"
    },
    {
      "filename": "/home/osboxes/esdoc/src/ESDocCLI.js",
      "startLine": 159,
      "endLine": 159,
      "before": "cli.exec()",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait cli.exec()"
    },
    {
      "filename": "/home/osboxes/esdoc/test/init.js",
      "startLine": 16,
      "endLine": 16,
      "before": "function cli(configPath) {\n  const cliPath = path.resolve('./src/cli.js');\n  const argv = ['node', cliPath];\n\n  if (configPath) {\n    configPath = path.resolve(configPath);\n    argv.push('-c', configPath);\n    console.log(`== start == ${configPath}`);\n  }\n\n  const cli = new ESDocCLI(argv);\n  cli.exec();\n  console.log(`== finish ==`);\n}",
      "after": "async function cli(configPath) {\n  const cliPath = path.resolve('./src/cli.js');\n  const argv = ['node', cliPath];\n\n  if (configPath) {\n    configPath = path.resolve(configPath);\n    argv.push('-c', configPath);\n    console.log(`== start == ${configPath}`);\n  }\n\n  const cli = new ESDocCLI(argv);\n  await cli.exec();\n  console.log(`== finish ==`);\n}"
    },
    {
      "filename": "/home/osboxes/esdoc/test/init.js",
      "startLine": 20,
      "endLine": 20,
      "before": "cli('./test/integration-test/esdoc.json')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait cli('./test/integration-test/esdoc.json')"
    }
  ],
  "10": [
    {
      "filename": "/home/osboxes/esdoc/src/ESDocCLI.js",
      "startLine": 144,
      "endLine": 144,
      "before": "/**\n * create config object from package.json.\n * @return {ESDocConfig|null} config object.\n * @private\n */\n_createConfigFromPackageJSON() {\n  try {\n    const filePath = path.resolve('./package.json');\n    const packageJSON = fs.readFileSync(filePath, 'utf8').toString();\n    const packageObj = JSON.parse(packageJSON);\n    return packageObj.esdoc;\n  } catch (e) {// ignore\n  }\n\n  return null;\n}",
      "after": "/**\n * create config object from package.json.\n * @return {ESDocConfig|null} config object.\n * @private\n */\nasync _createConfigFromPackageJSON() {\n  try {\n    const filePath = path.resolve('./package.json');\n    const packageJSON = (await fs.promises.readFile(filePath, 'utf8')).toString();\n    const packageObj = JSON.parse(packageJSON);\n    return packageObj.esdoc;\n  } catch (e) {// ignore\n  }\n\n  return null;\n}"
    },
    {
      "filename": "/home/osboxes/esdoc/src/ESDocCLI.js",
      "startLine": 45,
      "endLine": 45,
      "before": "/**\n * execute to generate document.\n */\nexec() {\n  let config;\n\n  const configPath = this._findConfigFilePath();\n\n  if (configPath) {\n    config = this._createConfigFromJSONFile(configPath);\n  } else {\n    config = this._createConfigFromPackageJSON();\n  }\n\n  if (config) {\n    ESDoc.generate(config);\n  } else {\n    this._showHelp();\n\n    process.exit(1);\n  }\n}\n/**\n * show help of ESDoc\n * @private\n */",
      "after": "/**\n * execute to generate document.\n */\nasync exec() {\n  let config;\n  const configPath = await this._findConfigFilePath();\n\n  if (configPath) {\n    config = await this._createConfigFromJSONFile(configPath);\n  } else {\n    config = await this._createConfigFromPackageJSON();\n  }\n\n  if (config) {\n    await ESDoc.generate(config);\n  } else {\n    this._showHelp();\n\n    process.exit(1);\n  }\n}\n/**\n * show help of ESDoc\n * @private\n */"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test-ci.js",
      "startLine": 4,
      "endLine": 4,
      "before": "sh.exec('./script/eslint.js')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec('./script/eslint.js')"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test-ci.js",
      "startLine": 5,
      "endLine": 5,
      "before": "sh.exec('./script/test.js --coverage')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec('./script/test.js --coverage')"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test-ci.js",
      "startLine": 6,
      "endLine": 6,
      "before": "sh.exec('./node_modules/.bin/codecov')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec('./node_modules/.bin/codecov')"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test.js",
      "startLine": 4,
      "endLine": 4,
      "before": "sh.exec('./script/eslint.js')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec('./script/eslint.js')"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test.js",
      "startLine": 18,
      "endLine": 18,
      "before": "sh.exec(`NODE_ENV=coverage ./node_modules/.bin/nyc ./node_modules/mocha/bin/_mocha ${mochaOption}`)",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec(`NODE_ENV=coverage ./node_modules/.bin/nyc ./node_modules/mocha/bin/_mocha ${mochaOption}`)"
    },
    {
      "filename": "/home/osboxes/esdoc/script/test.js",
      "startLine": 20,
      "endLine": 20,
      "before": "sh.exec(`./node_modules/.bin/mocha ${mochaOption}`)",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait sh.exec(`./node_modules/.bin/mocha ${mochaOption}`)"
    },
    {
      "filename": "/home/osboxes/esdoc/src/ESDocCLI.js",
      "startLine": 159,
      "endLine": 159,
      "before": "cli.exec()",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait cli.exec()"
    },
    {
      "filename": "/home/osboxes/esdoc/test/init.js",
      "startLine": 16,
      "endLine": 16,
      "before": "function cli(configPath) {\n  const cliPath = path.resolve('./src/cli.js');\n  const argv = ['node', cliPath];\n\n  if (configPath) {\n    configPath = path.resolve(configPath);\n    argv.push('-c', configPath);\n    console.log(`== start == ${configPath}`);\n  }\n\n  const cli = new ESDocCLI(argv);\n  cli.exec();\n  console.log(`== finish ==`);\n}",
      "after": "async function cli(configPath) {\n  const cliPath = path.resolve('./src/cli.js');\n  const argv = ['node', cliPath];\n\n  if (configPath) {\n    configPath = path.resolve(configPath);\n    argv.push('-c', configPath);\n    console.log(`== start == ${configPath}`);\n  }\n\n  const cli = new ESDocCLI(argv);\n  await cli.exec();\n  console.log(`== finish ==`);\n}"
    },
    {
      "filename": "/home/osboxes/esdoc/test/init.js",
      "startLine": 20,
      "endLine": 20,
      "before": "cli('./test/integration-test/esdoc.json')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait cli('./test/integration-test/esdoc.json')"
    }
  ],
  "16": [
    {
      "filename": "/home/osboxes/esdoc/test/init.js",
      "startLine": 21,
      "endLine": 21,
      "before": "fs.readFileSync('./test/integration-test/out/index.json')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait fs.promises.readFile('./test/integration-test/out/index.json')"
    }
  ],
  "17": [
    {
      "filename": "/home/osboxes/esdoc/test/integration-test/plugin/MyPlugin1.test.js",
      "startLine": 29,
      "endLine": 29,
      "before": "() => {\n  const content = fs.readFileSync('./test/integration-test/out/index.md').toString();\n  assert(content.includes('EmptyForPlugin_Modified1_Modified2'));\n  assert(content.includes('made by MyPlugin1_Modified'));\n}",
      "after": "async () => {\n  const content = (await fs.promises.readFile('./test/integration-test/out/index.md')).toString();\n  assert(content.includes('EmptyForPlugin_Modified1_Modified2'));\n  assert(content.includes('made by MyPlugin1_Modified'));\n}"
    }
  ],
  "18": [
    {
      "filename": "/home/osboxes/esdoc/test/integration-test/util.js",
      "startLine": 25,
      "endLine": 25,
      "before": "function file(filePath) {\n  return fs.readFileSync(filePath).toString();\n}",
      "after": "async function file(filePath) {\n  return (await fs.promises.readFile(filePath)).toString();\n}"
    },
    {
      "filename": "/home/osboxes/esdoc/test/integration-test/README.test.js",
      "startLine": 8,
      "endLine": 8,
      "before": "() => {\n  const doc = find('longname', /\\/README.md$/);\n  assert.equal(doc.kind, 'index');\n  assert.equal(doc.content, file(doc.longname));\n}",
      "after": "async () => {\n  const doc = find('longname', /\\/README.md$/);\n  assert.equal(doc.kind, 'index');\n  assert.equal(doc.content, await file(doc.longname));\n}"
    }
  ],
  "19": [
    {
      "filename": "/home/osboxes/esdoc/test/unit-test/ESDocCLI.test.js",
      "startLine": 35,
      "endLine": 35,
      "before": "() => {\n  process.chdir('./test/');\n  fs.writeFileSync('.esdoc.json', 'dummy');\n  const cli = new ESDocCLI([null, null]);\n  assert.equal(cli._findConfigFilePath(), path.resolve('.esdoc.json'));\n  fs.unlinkSync('.esdoc.json');\n  process.chdir('../');\n}",
      "after": "async () => {\n  process.chdir('./test/');\n  await fs.promises.writeFile('.esdoc.json', 'dummy');\n  const cli = new ESDocCLI([null, null]);\n  assert.equal(await cli._findConfigFilePath(), path.resolve('.esdoc.json'));\n  fs.unlinkSync('.esdoc.json');\n  process.chdir('../');\n}"
    }
  ],
  "20": [
    {
      "filename": "/home/osboxes/esdoc/test/unit-test/ESDocCLI.test.js",
      "startLine": 44,
      "endLine": 44,
      "before": "() => {\n  process.chdir('./test/');\n  fs.writeFileSync('.esdoc.js', 'dummy');\n  const cli = new ESDocCLI([null, null]);\n  assert.equal(cli._findConfigFilePath(), path.resolve('.esdoc.js'));\n  fs.unlinkSync('.esdoc.js');\n  process.chdir('../');\n}",
      "after": "async () => {\n  process.chdir('./test/');\n  await fs.promises.writeFile('.esdoc.js', 'dummy');\n  const cli = new ESDocCLI([null, null]);\n  assert.equal(await cli._findConfigFilePath(), path.resolve('.esdoc.js'));\n  fs.unlinkSync('.esdoc.js');\n  process.chdir('../');\n}"
    }
  ]
}