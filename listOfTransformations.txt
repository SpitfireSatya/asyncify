{
  "0": [
    {
      "filename": "/home/osboxes/node-blend/benchmark/bench-stitch.js",
      "startLine": 18,
      "endLine": 18,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "1": [
    {
      "filename": "/home/osboxes/node-blend/benchmark/bench-stitch.js",
      "startLine": 19,
      "endLine": 19,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "2": [
    {
      "filename": "/home/osboxes/node-blend/benchmark/bench-stitch.js",
      "startLine": 20,
      "endLine": 20,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "3": [
    {
      "filename": "/home/osboxes/node-blend/benchmark/bench-stitch.js",
      "startLine": 21,
      "endLine": 21,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "4": [
    {
      "filename": "/home/osboxes/node-blend/benchmark/bench-stitch.js",
      "startLine": 22,
      "endLine": 22,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "5": [
    {
      "filename": "/home/osboxes/node-blend/benchmark/bench-stitch.js",
      "startLine": 23,
      "endLine": 23,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "6": [
    {
      "filename": "/home/osboxes/node-blend/benchmark/bench-stitch.js",
      "startLine": 24,
      "endLine": 24,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "7": [
    {
      "filename": "/home/osboxes/node-blend/benchmark/bench-stitch.js",
      "startLine": 25,
      "endLine": 25,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "8": [
    {
      "filename": "/home/osboxes/node-blend/benchmark/bench-stitch.js",
      "startLine": 26,
      "endLine": 26,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "9": [
    {
      "filename": "/home/osboxes/node-blend/benchmark/bench-stitch.js",
      "startLine": 27,
      "endLine": 27,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "10": [
    {
      "filename": "/home/osboxes/node-blend/benchmark/bench-stitch.js",
      "startLine": 28,
      "endLine": 28,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "11": [
    {
      "filename": "/home/osboxes/node-blend/benchmark/bench-stitch.js",
      "startLine": 29,
      "endLine": 29,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "12": [
    {
      "filename": "/home/osboxes/node-blend/benchmark/bench-stitch.js",
      "startLine": 30,
      "endLine": 30,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "13": [
    {
      "filename": "/home/osboxes/node-blend/benchmark/bench-stitch.js",
      "startLine": 31,
      "endLine": 31,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "14": [
    {
      "filename": "/home/osboxes/node-blend/benchmark/bench-stitch.js",
      "startLine": 32,
      "endLine": 32,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "15": [
    {
      "filename": "/home/osboxes/node-blend/benchmark/bench-stitch.js",
      "startLine": 33,
      "endLine": 33,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "16": [
    {
      "filename": "/home/osboxes/node-blend/benchmark/bench-tint.js",
      "startLine": 18,
      "endLine": 18,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for bench tint');\n  console.time('benchTint'); // Actual benchmarking code:\n\n  var iterations = 100;\n  var concurrency = 10;\n  var images = [{\n    buffer: fs.readFileSync('test/fixture/tinting/iceland.png'),\n    tint: blend.parseTintString(blend.upgradeTintString('30;50'))\n  }, {\n    buffer: fs.readFileSync('test/fixture/tinting/heat.png'),\n    tint: {\n      h: [.5, 1],\n      s: [1, 1],\n      l: [0, 1],\n      a: [0, 1]\n    }\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 256,\n      height: 256,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out-tint1.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Tint] Iterations: %d', iterations);\n    console.warn('[Tint] Concurrency: %d', concurrency);\n    console.warn('[Tint] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchTint');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for bench tint');\n  console.time('benchTint'); // Actual benchmarking code:\n\n  var iterations = 100;\n  var concurrency = 10;\n  var images = [{\n    buffer: await fs.promises.readFile('test/fixture/tinting/iceland.png'),\n    tint: blend.parseTintString(blend.upgradeTintString('30;50'))\n  }, {\n    buffer: fs.readFileSync('test/fixture/tinting/heat.png'),\n    tint: {\n      h: [.5, 1],\n      s: [1, 1],\n      l: [0, 1],\n      a: [0, 1]\n    }\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 256,\n      height: 256,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out-tint1.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Tint] Iterations: %d', iterations);\n    console.warn('[Tint] Concurrency: %d', concurrency);\n    console.warn('[Tint] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchTint');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "17": [
    {
      "filename": "/home/osboxes/node-blend/benchmark/bench-tint.js",
      "startLine": 21,
      "endLine": 21,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for bench tint');\n  console.time('benchTint'); // Actual benchmarking code:\n\n  var iterations = 100;\n  var concurrency = 10;\n  var images = [{\n    buffer: fs.readFileSync('test/fixture/tinting/iceland.png'),\n    tint: blend.parseTintString(blend.upgradeTintString('30;50'))\n  }, {\n    buffer: fs.readFileSync('test/fixture/tinting/heat.png'),\n    tint: {\n      h: [.5, 1],\n      s: [1, 1],\n      l: [0, 1],\n      a: [0, 1]\n    }\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 256,\n      height: 256,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out-tint1.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Tint] Iterations: %d', iterations);\n    console.warn('[Tint] Concurrency: %d', concurrency);\n    console.warn('[Tint] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchTint');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for bench tint');\n  console.time('benchTint'); // Actual benchmarking code:\n\n  var iterations = 100;\n  var concurrency = 10;\n  var images = [{\n    buffer: await fs.promises.readFile('test/fixture/tinting/iceland.png'),\n    tint: blend.parseTintString(blend.upgradeTintString('30;50'))\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/tinting/heat.png'),\n    tint: {\n      h: [.5, 1],\n      s: [1, 1],\n      l: [0, 1],\n      a: [0, 1]\n    }\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 256,\n      height: 256,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out-tint1.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Tint] Iterations: %d', iterations);\n    console.warn('[Tint] Concurrency: %d', concurrency);\n    console.warn('[Tint] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchTint');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "18": [
    {
      "filename": "/home/osboxes/node-blend/benchmark/bench-tint2.js",
      "startLine": 16,
      "endLine": 16,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for bench tint 2');\n  console.time('benchTint2'); // Actual benchmarking code:\n\n  var iterations = 200;\n  var concurrency = 10;\n  var images = [{\n    buffer: fs.readFileSync('test/fixture/tinting/landsat3.jpg'),\n    tint: blend.parseTintString('.1x1;0x1;0x1;0x1')\n  }, {\n    buffer: fs.readFileSync('test/fixture/tinting/heat.png'),\n    tint: blend.parseTintString('0x1;0x.5;0x.5;0x1')\n  }, {\n    buffer: fs.readFileSync('test/fixture/tinting/borders.png'),\n    tint: blend.parseTintString('0x1;0x0;1x1;0x.5')\n  }, {\n    buffer: fs.readFileSync('test/fixture/tinting/overlay.png'),\n    tint: blend.parseTintString('.85x1;.5x1;0x1;0x.8')\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 256,\n      height: 256,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out-tint1.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Tint 2] Iterations: %d', iterations);\n    console.warn('[Tint 2] Concurrency: %d', concurrency);\n    console.warn('[Tint 2] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchTint2');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for bench tint 2');\n  console.time('benchTint2'); // Actual benchmarking code:\n\n  var iterations = 200;\n  var concurrency = 10;\n  var images = [{\n    buffer: await fs.promises.readFile('test/fixture/tinting/landsat3.jpg'),\n    tint: blend.parseTintString('.1x1;0x1;0x1;0x1')\n  }, {\n    buffer: fs.readFileSync('test/fixture/tinting/heat.png'),\n    tint: blend.parseTintString('0x1;0x.5;0x.5;0x1')\n  }, {\n    buffer: fs.readFileSync('test/fixture/tinting/borders.png'),\n    tint: blend.parseTintString('0x1;0x0;1x1;0x.5')\n  }, {\n    buffer: fs.readFileSync('test/fixture/tinting/overlay.png'),\n    tint: blend.parseTintString('.85x1;.5x1;0x1;0x.8')\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 256,\n      height: 256,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out-tint1.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Tint 2] Iterations: %d', iterations);\n    console.warn('[Tint 2] Concurrency: %d', concurrency);\n    console.warn('[Tint 2] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchTint2');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "19": [
    {
      "filename": "/home/osboxes/node-blend/benchmark/bench-tint2.js",
      "startLine": 19,
      "endLine": 19,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for bench tint 2');\n  console.time('benchTint2'); // Actual benchmarking code:\n\n  var iterations = 200;\n  var concurrency = 10;\n  var images = [{\n    buffer: fs.readFileSync('test/fixture/tinting/landsat3.jpg'),\n    tint: blend.parseTintString('.1x1;0x1;0x1;0x1')\n  }, {\n    buffer: fs.readFileSync('test/fixture/tinting/heat.png'),\n    tint: blend.parseTintString('0x1;0x.5;0x.5;0x1')\n  }, {\n    buffer: fs.readFileSync('test/fixture/tinting/borders.png'),\n    tint: blend.parseTintString('0x1;0x0;1x1;0x.5')\n  }, {\n    buffer: fs.readFileSync('test/fixture/tinting/overlay.png'),\n    tint: blend.parseTintString('.85x1;.5x1;0x1;0x.8')\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 256,\n      height: 256,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out-tint1.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Tint 2] Iterations: %d', iterations);\n    console.warn('[Tint 2] Concurrency: %d', concurrency);\n    console.warn('[Tint 2] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchTint2');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for bench tint 2');\n  console.time('benchTint2'); // Actual benchmarking code:\n\n  var iterations = 200;\n  var concurrency = 10;\n  var images = [{\n    buffer: await fs.promises.readFile('test/fixture/tinting/landsat3.jpg'),\n    tint: blend.parseTintString('.1x1;0x1;0x1;0x1')\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/tinting/heat.png'),\n    tint: blend.parseTintString('0x1;0x.5;0x.5;0x1')\n  }, {\n    buffer: fs.readFileSync('test/fixture/tinting/borders.png'),\n    tint: blend.parseTintString('0x1;0x0;1x1;0x.5')\n  }, {\n    buffer: fs.readFileSync('test/fixture/tinting/overlay.png'),\n    tint: blend.parseTintString('.85x1;.5x1;0x1;0x.8')\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 256,\n      height: 256,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out-tint1.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Tint 2] Iterations: %d', iterations);\n    console.warn('[Tint 2] Concurrency: %d', concurrency);\n    console.warn('[Tint 2] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchTint2');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "20": [
    {
      "filename": "/home/osboxes/node-blend/benchmark/bench-tint2.js",
      "startLine": 22,
      "endLine": 22,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for bench tint 2');\n  console.time('benchTint2'); // Actual benchmarking code:\n\n  var iterations = 200;\n  var concurrency = 10;\n  var images = [{\n    buffer: fs.readFileSync('test/fixture/tinting/landsat3.jpg'),\n    tint: blend.parseTintString('.1x1;0x1;0x1;0x1')\n  }, {\n    buffer: fs.readFileSync('test/fixture/tinting/heat.png'),\n    tint: blend.parseTintString('0x1;0x.5;0x.5;0x1')\n  }, {\n    buffer: fs.readFileSync('test/fixture/tinting/borders.png'),\n    tint: blend.parseTintString('0x1;0x0;1x1;0x.5')\n  }, {\n    buffer: fs.readFileSync('test/fixture/tinting/overlay.png'),\n    tint: blend.parseTintString('.85x1;.5x1;0x1;0x.8')\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 256,\n      height: 256,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out-tint1.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Tint 2] Iterations: %d', iterations);\n    console.warn('[Tint 2] Concurrency: %d', concurrency);\n    console.warn('[Tint 2] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchTint2');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for bench tint 2');\n  console.time('benchTint2'); // Actual benchmarking code:\n\n  var iterations = 200;\n  var concurrency = 10;\n  var images = [{\n    buffer: await fs.promises.readFile('test/fixture/tinting/landsat3.jpg'),\n    tint: blend.parseTintString('.1x1;0x1;0x1;0x1')\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/tinting/heat.png'),\n    tint: blend.parseTintString('0x1;0x.5;0x.5;0x1')\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/tinting/borders.png'),\n    tint: blend.parseTintString('0x1;0x0;1x1;0x.5')\n  }, {\n    buffer: fs.readFileSync('test/fixture/tinting/overlay.png'),\n    tint: blend.parseTintString('.85x1;.5x1;0x1;0x.8')\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 256,\n      height: 256,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out-tint1.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Tint 2] Iterations: %d', iterations);\n    console.warn('[Tint 2] Concurrency: %d', concurrency);\n    console.warn('[Tint 2] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchTint2');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "21": [
    {
      "filename": "/home/osboxes/node-blend/benchmark/bench-tint2.js",
      "startLine": 25,
      "endLine": 25,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for bench tint 2');\n  console.time('benchTint2'); // Actual benchmarking code:\n\n  var iterations = 200;\n  var concurrency = 10;\n  var images = [{\n    buffer: fs.readFileSync('test/fixture/tinting/landsat3.jpg'),\n    tint: blend.parseTintString('.1x1;0x1;0x1;0x1')\n  }, {\n    buffer: fs.readFileSync('test/fixture/tinting/heat.png'),\n    tint: blend.parseTintString('0x1;0x.5;0x.5;0x1')\n  }, {\n    buffer: fs.readFileSync('test/fixture/tinting/borders.png'),\n    tint: blend.parseTintString('0x1;0x0;1x1;0x.5')\n  }, {\n    buffer: fs.readFileSync('test/fixture/tinting/overlay.png'),\n    tint: blend.parseTintString('.85x1;.5x1;0x1;0x.8')\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 256,\n      height: 256,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out-tint1.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Tint 2] Iterations: %d', iterations);\n    console.warn('[Tint 2] Concurrency: %d', concurrency);\n    console.warn('[Tint 2] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchTint2');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for bench tint 2');\n  console.time('benchTint2'); // Actual benchmarking code:\n\n  var iterations = 200;\n  var concurrency = 10;\n  var images = [{\n    buffer: await fs.promises.readFile('test/fixture/tinting/landsat3.jpg'),\n    tint: blend.parseTintString('.1x1;0x1;0x1;0x1')\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/tinting/heat.png'),\n    tint: blend.parseTintString('0x1;0x.5;0x.5;0x1')\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/tinting/borders.png'),\n    tint: blend.parseTintString('0x1;0x0;1x1;0x.5')\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/tinting/overlay.png'),\n    tint: blend.parseTintString('.85x1;.5x1;0x1;0x.8')\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 256,\n      height: 256,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out-tint1.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Tint 2] Iterations: %d', iterations);\n    console.warn('[Tint 2] Concurrency: %d', concurrency);\n    console.warn('[Tint 2] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchTint2');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "22": [
    {
      "filename": "/home/osboxes/node-blend/benchmark/reencode-jpg.js",
      "startLine": 16,
      "endLine": 16,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for reencode jpg');\n  console.time('reencodeJPG'); // Actual benchmarking code:\n\n  var iterations = 1000;\n  var concurrency = 10;\n  var images = [fs.readFileSync('test/fixture/tinting/iceland.webp')];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      reencode: true,\n      format: 'jpg'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./reencode.jpg', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[JPEG] Iterations: %d', iterations);\n    console.warn('[JPEG] Concurrency: %d', concurrency);\n    console.warn('[JPEG] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('reencodeJPG');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for reencode jpg');\n  console.time('reencodeJPG'); // Actual benchmarking code:\n\n  var iterations = 1000;\n  var concurrency = 10;\n  var images = [await fs.promises.readFile('test/fixture/tinting/iceland.webp')];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      reencode: true,\n      format: 'jpg'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./reencode.jpg', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[JPEG] Iterations: %d', iterations);\n    console.warn('[JPEG] Concurrency: %d', concurrency);\n    console.warn('[JPEG] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('reencodeJPG');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "23": [
    {
      "filename": "/home/osboxes/node-blend/benchmark/reencode-png.js",
      "startLine": 16,
      "endLine": 16,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for reencode png');\n  console.time('reencodePNG'); // Actual benchmarking code:\n\n  var iterations = 100;\n  var concurrency = 10;\n  var images = [fs.readFileSync('test/fixture/tinting/iceland.png')];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      reencode: true,\n      format: 'png',\n      quality: 256\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./reencode.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[PNG] Iterations: %d', iterations);\n    console.warn('[PNG] Concurrency: %d', concurrency);\n    console.warn('[PNG] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('reencodePNG');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for reencode png');\n  console.time('reencodePNG'); // Actual benchmarking code:\n\n  var iterations = 100;\n  var concurrency = 10;\n  var images = [await fs.promises.readFile('test/fixture/tinting/iceland.png')];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      reencode: true,\n      format: 'png',\n      quality: 256\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./reencode.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[PNG] Iterations: %d', iterations);\n    console.warn('[PNG] Concurrency: %d', concurrency);\n    console.warn('[PNG] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('reencodePNG');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "24": [
    {
      "filename": "/home/osboxes/node-blend/benchmark/reencode-webp.js",
      "startLine": 16,
      "endLine": 16,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for reencode webp');\n  console.time('reencodeWEBP'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [fs.readFileSync('test/fixture/tinting/iceland.png')];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      reencode: true,\n      format: 'webp',\n      compression: 1\n    }, function (err, data) {\n      if (err) throw err;\n\n      if (!written) {\n        fs.writeFileSync('./reencode.webp', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[WebP] Iterations: %d', iterations);\n    console.warn('[WebP] Concurrency: %d', concurrency);\n    console.warn('[WebP] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('reencodeWEBP');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for reencode webp');\n  console.time('reencodeWEBP'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [await fs.promises.readFile('test/fixture/tinting/iceland.png')];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      reencode: true,\n      format: 'webp',\n      compression: 1\n    }, function (err, data) {\n      if (err) throw err;\n\n      if (!written) {\n        fs.writeFileSync('./reencode.webp', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[WebP] Iterations: %d', iterations);\n    console.warn('[WebP] Concurrency: %d', concurrency);\n    console.warn('[WebP] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('reencodeWEBP');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "25": [
    {
      "filename": "/home/osboxes/node-blend/benchmark-async/bench-stitch.js",
      "startLine": 18,
      "endLine": 18,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "26": [
    {
      "filename": "/home/osboxes/node-blend/benchmark-async/bench-stitch.js",
      "startLine": 19,
      "endLine": 19,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "27": [
    {
      "filename": "/home/osboxes/node-blend/benchmark-async/bench-stitch.js",
      "startLine": 20,
      "endLine": 20,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "28": [
    {
      "filename": "/home/osboxes/node-blend/benchmark-async/bench-stitch.js",
      "startLine": 21,
      "endLine": 21,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "29": [
    {
      "filename": "/home/osboxes/node-blend/benchmark-async/bench-stitch.js",
      "startLine": 22,
      "endLine": 22,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "30": [
    {
      "filename": "/home/osboxes/node-blend/benchmark-async/bench-stitch.js",
      "startLine": 23,
      "endLine": 23,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "31": [
    {
      "filename": "/home/osboxes/node-blend/benchmark-async/bench-stitch.js",
      "startLine": 24,
      "endLine": 24,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "32": [
    {
      "filename": "/home/osboxes/node-blend/benchmark-async/bench-stitch.js",
      "startLine": 25,
      "endLine": 25,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "33": [
    {
      "filename": "/home/osboxes/node-blend/benchmark-async/bench-stitch.js",
      "startLine": 26,
      "endLine": 26,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "34": [
    {
      "filename": "/home/osboxes/node-blend/benchmark-async/bench-stitch.js",
      "startLine": 27,
      "endLine": 27,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "35": [
    {
      "filename": "/home/osboxes/node-blend/benchmark-async/bench-stitch.js",
      "startLine": 28,
      "endLine": 28,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "36": [
    {
      "filename": "/home/osboxes/node-blend/benchmark-async/bench-stitch.js",
      "startLine": 29,
      "endLine": 29,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "37": [
    {
      "filename": "/home/osboxes/node-blend/benchmark-async/bench-stitch.js",
      "startLine": 30,
      "endLine": 30,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "38": [
    {
      "filename": "/home/osboxes/node-blend/benchmark-async/bench-stitch.js",
      "startLine": 31,
      "endLine": 31,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "39": [
    {
      "filename": "/home/osboxes/node-blend/benchmark-async/bench-stitch.js",
      "startLine": 32,
      "endLine": 32,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "40": [
    {
      "filename": "/home/osboxes/node-blend/benchmark-async/bench-stitch.js",
      "startLine": 33,
      "endLine": 33,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for bench stitch');\n  console.time('benchStitch'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 700,\n      height: 600,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Stitch] Iterations: %d', iterations);\n    console.warn('[Stitch] Concurrency: %d', concurrency);\n    console.warn('[Stitch] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchStitch');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "41": [
    {
      "filename": "/home/osboxes/node-blend/benchmark-async/bench-tint.js",
      "startLine": 18,
      "endLine": 18,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for bench tint');\n  console.time('benchTint'); // Actual benchmarking code:\n\n  var iterations = 100;\n  var concurrency = 10;\n  var images = [{\n    buffer: fs.readFileSync('test/fixture/tinting/iceland.png'),\n    tint: blend.parseTintString(blend.upgradeTintString('30;50'))\n  }, {\n    buffer: fs.readFileSync('test/fixture/tinting/heat.png'),\n    tint: {\n      h: [.5, 1],\n      s: [1, 1],\n      l: [0, 1],\n      a: [0, 1]\n    }\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 256,\n      height: 256,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out-tint1.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Tint] Iterations: %d', iterations);\n    console.warn('[Tint] Concurrency: %d', concurrency);\n    console.warn('[Tint] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchTint');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for bench tint');\n  console.time('benchTint'); // Actual benchmarking code:\n\n  var iterations = 100;\n  var concurrency = 10;\n  var images = [{\n    buffer: await fs.promises.readFile('test/fixture/tinting/iceland.png'),\n    tint: blend.parseTintString(blend.upgradeTintString('30;50'))\n  }, {\n    buffer: fs.readFileSync('test/fixture/tinting/heat.png'),\n    tint: {\n      h: [.5, 1],\n      s: [1, 1],\n      l: [0, 1],\n      a: [0, 1]\n    }\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 256,\n      height: 256,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out-tint1.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Tint] Iterations: %d', iterations);\n    console.warn('[Tint] Concurrency: %d', concurrency);\n    console.warn('[Tint] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchTint');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "42": [
    {
      "filename": "/home/osboxes/node-blend/benchmark-async/bench-tint.js",
      "startLine": 21,
      "endLine": 21,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for bench tint');\n  console.time('benchTint'); // Actual benchmarking code:\n\n  var iterations = 100;\n  var concurrency = 10;\n  var images = [{\n    buffer: fs.readFileSync('test/fixture/tinting/iceland.png'),\n    tint: blend.parseTintString(blend.upgradeTintString('30;50'))\n  }, {\n    buffer: fs.readFileSync('test/fixture/tinting/heat.png'),\n    tint: {\n      h: [.5, 1],\n      s: [1, 1],\n      l: [0, 1],\n      a: [0, 1]\n    }\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 256,\n      height: 256,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out-tint1.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Tint] Iterations: %d', iterations);\n    console.warn('[Tint] Concurrency: %d', concurrency);\n    console.warn('[Tint] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchTint');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for bench tint');\n  console.time('benchTint'); // Actual benchmarking code:\n\n  var iterations = 100;\n  var concurrency = 10;\n  var images = [{\n    buffer: await fs.promises.readFile('test/fixture/tinting/iceland.png'),\n    tint: blend.parseTintString(blend.upgradeTintString('30;50'))\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/tinting/heat.png'),\n    tint: {\n      h: [.5, 1],\n      s: [1, 1],\n      l: [0, 1],\n      a: [0, 1]\n    }\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 256,\n      height: 256,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out-tint1.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Tint] Iterations: %d', iterations);\n    console.warn('[Tint] Concurrency: %d', concurrency);\n    console.warn('[Tint] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchTint');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "43": [
    {
      "filename": "/home/osboxes/node-blend/benchmark-async/bench-tint2.js",
      "startLine": 16,
      "endLine": 16,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for bench tint 2');\n  console.time('benchTint2'); // Actual benchmarking code:\n\n  var iterations = 200;\n  var concurrency = 10;\n  var images = [{\n    buffer: fs.readFileSync('test/fixture/tinting/landsat3.jpg'),\n    tint: blend.parseTintString('.1x1;0x1;0x1;0x1')\n  }, {\n    buffer: fs.readFileSync('test/fixture/tinting/heat.png'),\n    tint: blend.parseTintString('0x1;0x.5;0x.5;0x1')\n  }, {\n    buffer: fs.readFileSync('test/fixture/tinting/borders.png'),\n    tint: blend.parseTintString('0x1;0x0;1x1;0x.5')\n  }, {\n    buffer: fs.readFileSync('test/fixture/tinting/overlay.png'),\n    tint: blend.parseTintString('.85x1;.5x1;0x1;0x.8')\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 256,\n      height: 256,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out-tint1.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Tint 2] Iterations: %d', iterations);\n    console.warn('[Tint 2] Concurrency: %d', concurrency);\n    console.warn('[Tint 2] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchTint2');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for bench tint 2');\n  console.time('benchTint2'); // Actual benchmarking code:\n\n  var iterations = 200;\n  var concurrency = 10;\n  var images = [{\n    buffer: await fs.promises.readFile('test/fixture/tinting/landsat3.jpg'),\n    tint: blend.parseTintString('.1x1;0x1;0x1;0x1')\n  }, {\n    buffer: fs.readFileSync('test/fixture/tinting/heat.png'),\n    tint: blend.parseTintString('0x1;0x.5;0x.5;0x1')\n  }, {\n    buffer: fs.readFileSync('test/fixture/tinting/borders.png'),\n    tint: blend.parseTintString('0x1;0x0;1x1;0x.5')\n  }, {\n    buffer: fs.readFileSync('test/fixture/tinting/overlay.png'),\n    tint: blend.parseTintString('.85x1;.5x1;0x1;0x.8')\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 256,\n      height: 256,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out-tint1.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Tint 2] Iterations: %d', iterations);\n    console.warn('[Tint 2] Concurrency: %d', concurrency);\n    console.warn('[Tint 2] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchTint2');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "44": [
    {
      "filename": "/home/osboxes/node-blend/benchmark-async/bench-tint2.js",
      "startLine": 19,
      "endLine": 19,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for bench tint 2');\n  console.time('benchTint2'); // Actual benchmarking code:\n\n  var iterations = 200;\n  var concurrency = 10;\n  var images = [{\n    buffer: fs.readFileSync('test/fixture/tinting/landsat3.jpg'),\n    tint: blend.parseTintString('.1x1;0x1;0x1;0x1')\n  }, {\n    buffer: fs.readFileSync('test/fixture/tinting/heat.png'),\n    tint: blend.parseTintString('0x1;0x.5;0x.5;0x1')\n  }, {\n    buffer: fs.readFileSync('test/fixture/tinting/borders.png'),\n    tint: blend.parseTintString('0x1;0x0;1x1;0x.5')\n  }, {\n    buffer: fs.readFileSync('test/fixture/tinting/overlay.png'),\n    tint: blend.parseTintString('.85x1;.5x1;0x1;0x.8')\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 256,\n      height: 256,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out-tint1.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Tint 2] Iterations: %d', iterations);\n    console.warn('[Tint 2] Concurrency: %d', concurrency);\n    console.warn('[Tint 2] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchTint2');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for bench tint 2');\n  console.time('benchTint2'); // Actual benchmarking code:\n\n  var iterations = 200;\n  var concurrency = 10;\n  var images = [{\n    buffer: await fs.promises.readFile('test/fixture/tinting/landsat3.jpg'),\n    tint: blend.parseTintString('.1x1;0x1;0x1;0x1')\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/tinting/heat.png'),\n    tint: blend.parseTintString('0x1;0x.5;0x.5;0x1')\n  }, {\n    buffer: fs.readFileSync('test/fixture/tinting/borders.png'),\n    tint: blend.parseTintString('0x1;0x0;1x1;0x.5')\n  }, {\n    buffer: fs.readFileSync('test/fixture/tinting/overlay.png'),\n    tint: blend.parseTintString('.85x1;.5x1;0x1;0x.8')\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 256,\n      height: 256,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out-tint1.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Tint 2] Iterations: %d', iterations);\n    console.warn('[Tint 2] Concurrency: %d', concurrency);\n    console.warn('[Tint 2] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchTint2');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "45": [
    {
      "filename": "/home/osboxes/node-blend/benchmark-async/bench-tint2.js",
      "startLine": 22,
      "endLine": 22,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for bench tint 2');\n  console.time('benchTint2'); // Actual benchmarking code:\n\n  var iterations = 200;\n  var concurrency = 10;\n  var images = [{\n    buffer: fs.readFileSync('test/fixture/tinting/landsat3.jpg'),\n    tint: blend.parseTintString('.1x1;0x1;0x1;0x1')\n  }, {\n    buffer: fs.readFileSync('test/fixture/tinting/heat.png'),\n    tint: blend.parseTintString('0x1;0x.5;0x.5;0x1')\n  }, {\n    buffer: fs.readFileSync('test/fixture/tinting/borders.png'),\n    tint: blend.parseTintString('0x1;0x0;1x1;0x.5')\n  }, {\n    buffer: fs.readFileSync('test/fixture/tinting/overlay.png'),\n    tint: blend.parseTintString('.85x1;.5x1;0x1;0x.8')\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 256,\n      height: 256,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out-tint1.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Tint 2] Iterations: %d', iterations);\n    console.warn('[Tint 2] Concurrency: %d', concurrency);\n    console.warn('[Tint 2] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchTint2');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for bench tint 2');\n  console.time('benchTint2'); // Actual benchmarking code:\n\n  var iterations = 200;\n  var concurrency = 10;\n  var images = [{\n    buffer: await fs.promises.readFile('test/fixture/tinting/landsat3.jpg'),\n    tint: blend.parseTintString('.1x1;0x1;0x1;0x1')\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/tinting/heat.png'),\n    tint: blend.parseTintString('0x1;0x.5;0x.5;0x1')\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/tinting/borders.png'),\n    tint: blend.parseTintString('0x1;0x0;1x1;0x.5')\n  }, {\n    buffer: fs.readFileSync('test/fixture/tinting/overlay.png'),\n    tint: blend.parseTintString('.85x1;.5x1;0x1;0x.8')\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 256,\n      height: 256,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out-tint1.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Tint 2] Iterations: %d', iterations);\n    console.warn('[Tint 2] Concurrency: %d', concurrency);\n    console.warn('[Tint 2] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchTint2');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "46": [
    {
      "filename": "/home/osboxes/node-blend/benchmark-async/bench-tint2.js",
      "startLine": 25,
      "endLine": 25,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for bench tint 2');\n  console.time('benchTint2'); // Actual benchmarking code:\n\n  var iterations = 200;\n  var concurrency = 10;\n  var images = [{\n    buffer: fs.readFileSync('test/fixture/tinting/landsat3.jpg'),\n    tint: blend.parseTintString('.1x1;0x1;0x1;0x1')\n  }, {\n    buffer: fs.readFileSync('test/fixture/tinting/heat.png'),\n    tint: blend.parseTintString('0x1;0x.5;0x.5;0x1')\n  }, {\n    buffer: fs.readFileSync('test/fixture/tinting/borders.png'),\n    tint: blend.parseTintString('0x1;0x0;1x1;0x.5')\n  }, {\n    buffer: fs.readFileSync('test/fixture/tinting/overlay.png'),\n    tint: blend.parseTintString('.85x1;.5x1;0x1;0x.8')\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 256,\n      height: 256,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out-tint1.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Tint 2] Iterations: %d', iterations);\n    console.warn('[Tint 2] Concurrency: %d', concurrency);\n    console.warn('[Tint 2] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchTint2');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for bench tint 2');\n  console.time('benchTint2'); // Actual benchmarking code:\n\n  var iterations = 200;\n  var concurrency = 10;\n  var images = [{\n    buffer: await fs.promises.readFile('test/fixture/tinting/landsat3.jpg'),\n    tint: blend.parseTintString('.1x1;0x1;0x1;0x1')\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/tinting/heat.png'),\n    tint: blend.parseTintString('0x1;0x.5;0x.5;0x1')\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/tinting/borders.png'),\n    tint: blend.parseTintString('0x1;0x0;1x1;0x.5')\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/tinting/overlay.png'),\n    tint: blend.parseTintString('.85x1;.5x1;0x1;0x.8')\n  }];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      width: 256,\n      height: 256,\n      quality: 256,\n      encoder: 'libpng',\n      mode: 'hextree'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./out-tint1.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[Tint 2] Iterations: %d', iterations);\n    console.warn('[Tint 2] Concurrency: %d', concurrency);\n    console.warn('[Tint 2] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('benchTint2');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "47": [
    {
      "filename": "/home/osboxes/node-blend/benchmark-async/reencode-jpg.js",
      "startLine": 16,
      "endLine": 16,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for reencode jpg');\n  console.time('reencodeJPG'); // Actual benchmarking code:\n\n  var iterations = 1000;\n  var concurrency = 10;\n  var images = [fs.readFileSync('test/fixture/tinting/iceland.webp')];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      reencode: true,\n      format: 'jpg'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./reencode.jpg', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[JPEG] Iterations: %d', iterations);\n    console.warn('[JPEG] Concurrency: %d', concurrency);\n    console.warn('[JPEG] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('reencodeJPG');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for reencode jpg');\n  console.time('reencodeJPG'); // Actual benchmarking code:\n\n  var iterations = 1000;\n  var concurrency = 10;\n  var images = [await fs.promises.readFile('test/fixture/tinting/iceland.webp')];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      reencode: true,\n      format: 'jpg'\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./reencode.jpg', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[JPEG] Iterations: %d', iterations);\n    console.warn('[JPEG] Concurrency: %d', concurrency);\n    console.warn('[JPEG] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('reencodeJPG');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "48": [
    {
      "filename": "/home/osboxes/node-blend/benchmark-async/reencode-png.js",
      "startLine": 16,
      "endLine": 16,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for reencode png');\n  console.time('reencodePNG'); // Actual benchmarking code:\n\n  var iterations = 100;\n  var concurrency = 10;\n  var images = [fs.readFileSync('test/fixture/tinting/iceland.png')];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      reencode: true,\n      format: 'png',\n      quality: 256\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./reencode.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[PNG] Iterations: %d', iterations);\n    console.warn('[PNG] Concurrency: %d', concurrency);\n    console.warn('[PNG] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('reencodePNG');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for reencode png');\n  console.time('reencodePNG'); // Actual benchmarking code:\n\n  var iterations = 100;\n  var concurrency = 10;\n  var images = [await fs.promises.readFile('test/fixture/tinting/iceland.png')];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      reencode: true,\n      format: 'png',\n      quality: 256\n    }, function (err, data) {\n      if (!written) {\n        fs.writeFileSync('./reencode.png', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[PNG] Iterations: %d', iterations);\n    console.warn('[PNG] Concurrency: %d', concurrency);\n    console.warn('[PNG] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('reencodePNG');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "49": [
    {
      "filename": "/home/osboxes/node-blend/benchmark-async/reencode-webp.js",
      "startLine": 16,
      "endLine": 16,
      "before": "(resolve, reject) => {\n  console.log('Started Execution for reencode webp');\n  console.time('reencodeWEBP'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [fs.readFileSync('test/fixture/tinting/iceland.png')];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      reencode: true,\n      format: 'webp',\n      compression: 1\n    }, function (err, data) {\n      if (err) throw err;\n\n      if (!written) {\n        fs.writeFileSync('./reencode.webp', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[WebP] Iterations: %d', iterations);\n    console.warn('[WebP] Concurrency: %d', concurrency);\n    console.warn('[WebP] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('reencodeWEBP');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}",
      "after": "async (resolve, reject) => {\n  console.log('Started Execution for reencode webp');\n  console.time('reencodeWEBP'); // Actual benchmarking code:\n\n  var iterations = 500;\n  var concurrency = 10;\n  var images = [await fs.promises.readFile('test/fixture/tinting/iceland.png')];\n  var written = false;\n  var queue = new Queue(function (i, done) {\n    blend(images, {\n      reencode: true,\n      format: 'webp',\n      compression: 1\n    }, function (err, data) {\n      if (err) throw err;\n\n      if (!written) {\n        fs.writeFileSync('./reencode.webp', data);\n        written = true;\n      }\n\n      done();\n    });\n  }, concurrency);\n  queue.on('empty', function () {\n    var msec = Date.now() - start;\n    console.warn('[WebP] Iterations: %d', iterations);\n    console.warn('[WebP] Concurrency: %d', concurrency);\n    console.warn('[WebP] Per second: %d', iterations / (msec / 1000));\n    console.timeEnd('reencodeWEBP');\n    resolve();\n  });\n\n  for (var i = 1; i <= iterations; i++) {\n    queue.add(i, false);\n  }\n\n  var start = Date.now();\n  queue.start();\n}"
    }
  ],
  "50": [
    {
      "filename": "/home/osboxes/node-blend/test/blend-error-handling.test.js",
      "startLine": 20,
      "endLine": 20,
      "before": "fs.readFileSync('test/fixture/1.png')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait fs.promises.readFile('test/fixture/1.png')"
    }
  ],
  "51": [
    {
      "filename": "/home/osboxes/node-blend/test/blend-error-handling.test.js",
      "startLine": 21,
      "endLine": 21,
      "before": "fs.readFileSync('test/fixture/2.png')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait fs.promises.readFile('test/fixture/2.png')"
    }
  ],
  "52": [
    {
      "filename": "/home/osboxes/node-blend/test/blend-error-handling.test.js",
      "startLine": 22,
      "endLine": 22,
      "before": "fs.readFileSync('test/fixture/32.png')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait fs.promises.readFile('test/fixture/32.png')"
    }
  ],
  "53": [
    {
      "filename": "/home/osboxes/node-blend/test/blend-error-handling.test.js",
      "startLine": 23,
      "endLine": 23,
      "before": "fs.readFileSync('test/fixture/1293.jpg')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait fs.promises.readFile('test/fixture/1293.jpg')"
    }
  ],
  "54": [
    {
      "filename": "/home/osboxes/node-blend/test/blend-error-handling.test.js",
      "startLine": 24,
      "endLine": 24,
      "before": "fs.readFileSync('test/fixture/1294.png')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait fs.promises.readFile('test/fixture/1294.png')"
    }
  ],
  "55": [
    {
      "filename": "/home/osboxes/node-blend/test/blend-error-handling.test.js",
      "startLine": 184,
      "endLine": 184,
      "before": "function (done) {\n  var buffer = new Buffer(32);\n  buffer.fill(0);\n  buffer[0] = 0xFF;\n  buffer[1] = 0xD8;\n  blend([buffer, fs.readFileSync('test/fixture/2.png')], function (err, data) {\n    assert.ok(err);\n    assert.ok(err.message);\n    done();\n  });\n}",
      "after": "async function (done) {\n  var buffer = new Buffer(32);\n  buffer.fill(0);\n  buffer[0] = 0xFF;\n  buffer[1] = 0xD8;\n  blend([buffer, await fs.promises.readFile('test/fixture/2.png')], function (err, data) {\n    assert.ok(err);\n    assert.ok(err.message);\n    done();\n  });\n}"
    }
  ],
  "56": [
    {
      "filename": "/home/osboxes/node-blend/test/blend-error-handling.test.js",
      "startLine": 194,
      "endLine": 194,
      "before": "function (done) {\n  blend([fs.readFileSync('test/fixture/1d.jpg'), fs.readFileSync('test/fixture/2.png')], function (err, data) {\n    assert.ok(err);\n    assert.ok(err.message);\n    done();\n  });\n}",
      "after": "async function (done) {\n  blend([await fs.promises.readFile('test/fixture/1d.jpg'), fs.readFileSync('test/fixture/2.png')], function (err, data) {\n    assert.ok(err);\n    assert.ok(err.message);\n    done();\n  });\n}"
    }
  ],
  "57": [
    {
      "filename": "/home/osboxes/node-blend/test/blend-error-handling.test.js",
      "startLine": 195,
      "endLine": 195,
      "before": "function (done) {\n  blend([fs.readFileSync('test/fixture/1d.jpg'), fs.readFileSync('test/fixture/2.png')], function (err, data) {\n    assert.ok(err);\n    assert.ok(err.message);\n    done();\n  });\n}",
      "after": "async function (done) {\n  blend([await fs.promises.readFile('test/fixture/1d.jpg'), await fs.promises.readFile('test/fixture/2.png')], function (err, data) {\n    assert.ok(err);\n    assert.ok(err.message);\n    done();\n  });\n}"
    }
  ],
  "58": [
    {
      "filename": "/home/osboxes/node-blend/test/blend-quantize.test.js",
      "startLine": 9,
      "endLine": 9,
      "before": "fs.readFileSync('test/fixture/1.png')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait fs.promises.readFile('test/fixture/1.png')"
    }
  ],
  "59": [
    {
      "filename": "/home/osboxes/node-blend/test/blend-quantize.test.js",
      "startLine": 10,
      "endLine": 10,
      "before": "fs.readFileSync('test/fixture/2.png')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait fs.promises.readFile('test/fixture/2.png')"
    }
  ],
  "60": [
    {
      "filename": "/home/osboxes/node-blend/test/blend-quantize.test.js",
      "startLine": 11,
      "endLine": 11,
      "before": "fs.readFileSync('test/fixture/3.png')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait fs.promises.readFile('test/fixture/3.png')"
    }
  ],
  "61": [
    {
      "filename": "/home/osboxes/node-blend/test/blend-quantize.test.js",
      "startLine": 12,
      "endLine": 12,
      "before": "fs.readFileSync('test/fixture/4.png')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait fs.promises.readFile('test/fixture/4.png')"
    }
  ],
  "62": [
    {
      "filename": "/home/osboxes/node-blend/test/blend-quantize.test.js",
      "startLine": 13,
      "endLine": 13,
      "before": "fs.readFileSync('test/fixture/5.png')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait fs.promises.readFile('test/fixture/5.png')"
    }
  ],
  "63": [
    {
      "filename": "/home/osboxes/node-blend/test/blend-single.test.js",
      "startLine": 9,
      "endLine": 9,
      "before": "fs.readFileSync('test/fixture/1.png')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait fs.promises.readFile('test/fixture/1.png')"
    }
  ],
  "64": [
    {
      "filename": "/home/osboxes/node-blend/test/blend-single.test.js",
      "startLine": 10,
      "endLine": 10,
      "before": "fs.readFileSync('test/fixture/2.png')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait fs.promises.readFile('test/fixture/2.png')"
    }
  ],
  "65": [
    {
      "filename": "/home/osboxes/node-blend/test/blend-single.test.js",
      "startLine": 11,
      "endLine": 11,
      "before": "fs.readFileSync('test/fixture/pattern.png')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait fs.promises.readFile('test/fixture/pattern.png')"
    }
  ],
  "66": [
    {
      "filename": "/home/osboxes/node-blend/test/blend-single.test.js",
      "startLine": 12,
      "endLine": 12,
      "before": "fs.readFileSync('test/fixture/9.webp')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait fs.promises.readFile('test/fixture/9.webp')"
    }
  ],
  "67": [
    {
      "filename": "/home/osboxes/node-blend/test/blend.test.js",
      "startLine": 9,
      "endLine": 9,
      "before": "fs.readFileSync('test/fixture/1.png')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait fs.promises.readFile('test/fixture/1.png')"
    }
  ],
  "68": [
    {
      "filename": "/home/osboxes/node-blend/test/blend.test.js",
      "startLine": 10,
      "endLine": 10,
      "before": "fs.readFileSync('test/fixture/2.png')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait fs.promises.readFile('test/fixture/2.png')"
    }
  ],
  "69": [
    {
      "filename": "/home/osboxes/node-blend/test/blend.test.js",
      "startLine": 11,
      "endLine": 11,
      "before": "fs.readFileSync('test/fixture/3.png')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait fs.promises.readFile('test/fixture/3.png')"
    }
  ],
  "70": [
    {
      "filename": "/home/osboxes/node-blend/test/blend.test.js",
      "startLine": 12,
      "endLine": 12,
      "before": "fs.readFileSync('test/fixture/4.png')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait fs.promises.readFile('test/fixture/4.png')"
    }
  ],
  "71": [
    {
      "filename": "/home/osboxes/node-blend/test/blend.test.js",
      "startLine": 13,
      "endLine": 13,
      "before": "fs.readFileSync('test/fixture/5.png')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait fs.promises.readFile('test/fixture/5.png')"
    }
  ],
  "72": [
    {
      "filename": "/home/osboxes/node-blend/test/blend.test.js",
      "startLine": 45,
      "endLine": 45,
      "before": "function (done) {\n  blend([fs.readFileSync('test/fixture/1a.jpg'), fs.readFileSync('test/fixture/2.png')], {\n    format: 'jpeg'\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/6.jpg', 0.01, done);\n  });\n}",
      "after": "async function (done) {\n  blend([await fs.promises.readFile('test/fixture/1a.jpg'), fs.readFileSync('test/fixture/2.png')], {\n    format: 'jpeg'\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/6.jpg', 0.01, done);\n  });\n}"
    }
  ],
  "73": [
    {
      "filename": "/home/osboxes/node-blend/test/blend.test.js",
      "startLine": 46,
      "endLine": 46,
      "before": "function (done) {\n  blend([fs.readFileSync('test/fixture/1a.jpg'), fs.readFileSync('test/fixture/2.png')], {\n    format: 'jpeg'\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/6.jpg', 0.01, done);\n  });\n}",
      "after": "async function (done) {\n  blend([await fs.promises.readFile('test/fixture/1a.jpg'), await fs.promises.readFile('test/fixture/2.png')], {\n    format: 'jpeg'\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/6.jpg', 0.01, done);\n  });\n}"
    }
  ],
  "74": [
    {
      "filename": "/home/osboxes/node-blend/test/blend.test.js",
      "startLine": 57,
      "endLine": 57,
      "before": "function (done) {\n  blend([fs.readFileSync('test/fixture/1a.jpg'), fs.readFileSync('test/fixture/2.png')], {\n    format: 'jpeg',\n    quality: 50\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/7.jpg', 0.01, done);\n  });\n}",
      "after": "async function (done) {\n  blend([await fs.promises.readFile('test/fixture/1a.jpg'), fs.readFileSync('test/fixture/2.png')], {\n    format: 'jpeg',\n    quality: 50\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/7.jpg', 0.01, done);\n  });\n}"
    }
  ],
  "75": [
    {
      "filename": "/home/osboxes/node-blend/test/blend.test.js",
      "startLine": 58,
      "endLine": 58,
      "before": "function (done) {\n  blend([fs.readFileSync('test/fixture/1a.jpg'), fs.readFileSync('test/fixture/2.png')], {\n    format: 'jpeg',\n    quality: 50\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/7.jpg', 0.01, done);\n  });\n}",
      "after": "async function (done) {\n  blend([await fs.promises.readFile('test/fixture/1a.jpg'), await fs.promises.readFile('test/fixture/2.png')], {\n    format: 'jpeg',\n    quality: 50\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/7.jpg', 0.01, done);\n  });\n}"
    }
  ],
  "76": [
    {
      "filename": "/home/osboxes/node-blend/test/blend.test.js",
      "startLine": 70,
      "endLine": 70,
      "before": "function (done) {\n  blend([fs.readFileSync('test/fixture/1c.jpg'), fs.readFileSync('test/fixture/2.png')], {\n    format: 'png'\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/8.png', 0.01, done);\n  });\n}",
      "after": "async function (done) {\n  blend([await fs.promises.readFile('test/fixture/1c.jpg'), fs.readFileSync('test/fixture/2.png')], {\n    format: 'png'\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/8.png', 0.01, done);\n  });\n}"
    }
  ],
  "77": [
    {
      "filename": "/home/osboxes/node-blend/test/blend.test.js",
      "startLine": 71,
      "endLine": 71,
      "before": "function (done) {\n  blend([fs.readFileSync('test/fixture/1c.jpg'), fs.readFileSync('test/fixture/2.png')], {\n    format: 'png'\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/8.png', 0.01, done);\n  });\n}",
      "after": "async function (done) {\n  blend([await fs.promises.readFile('test/fixture/1c.jpg'), await fs.promises.readFile('test/fixture/2.png')], {\n    format: 'png'\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/8.png', 0.01, done);\n  });\n}"
    }
  ],
  "78": [
    {
      "filename": "/home/osboxes/node-blend/test/blend.test.js",
      "startLine": 82,
      "endLine": 82,
      "before": "function (done) {\n  blend([fs.readFileSync('test/fixture/1c.jpg'), fs.readFileSync('test/fixture/2.png')], {// empty\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/9.png', 0.01, done);\n  });\n}",
      "after": "async function (done) {\n  blend([await fs.promises.readFile('test/fixture/1c.jpg'), fs.readFileSync('test/fixture/2.png')], {// empty\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/9.png', 0.01, done);\n  });\n}"
    }
  ],
  "79": [
    {
      "filename": "/home/osboxes/node-blend/test/blend.test.js",
      "startLine": 83,
      "endLine": 83,
      "before": "function (done) {\n  blend([fs.readFileSync('test/fixture/1c.jpg'), fs.readFileSync('test/fixture/2.png')], {// empty\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/9.png', 0.01, done);\n  });\n}",
      "after": "async function (done) {\n  blend([await fs.promises.readFile('test/fixture/1c.jpg'), await fs.promises.readFile('test/fixture/2.png')], {// empty\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/9.png', 0.01, done);\n  });\n}"
    }
  ],
  "80": [
    {
      "filename": "/home/osboxes/node-blend/test/blend.test.js",
      "startLine": 94,
      "endLine": 94,
      "before": "function (done) {\n  blend([fs.readFileSync('test/fixture/1a.jpg'), fs.readFileSync('test/fixture/2.png')], function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/3.png', done);\n  });\n}",
      "after": "async function (done) {\n  blend([await fs.promises.readFile('test/fixture/1a.jpg'), fs.readFileSync('test/fixture/2.png')], function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/3.png', done);\n  });\n}"
    }
  ],
  "81": [
    {
      "filename": "/home/osboxes/node-blend/test/blend.test.js",
      "startLine": 95,
      "endLine": 95,
      "before": "function (done) {\n  blend([fs.readFileSync('test/fixture/1a.jpg'), fs.readFileSync('test/fixture/2.png')], function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/3.png', done);\n  });\n}",
      "after": "async function (done) {\n  blend([await fs.promises.readFile('test/fixture/1a.jpg'), await fs.promises.readFile('test/fixture/2.png')], function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/3.png', done);\n  });\n}"
    }
  ],
  "82": [
    {
      "filename": "/home/osboxes/node-blend/test/blend.test.js",
      "startLine": 104,
      "endLine": 104,
      "before": "function (done) {\n  blend([fs.readFileSync('test/fixture/1b.jpg'), fs.readFileSync('test/fixture/2.png')], function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/4.png', done);\n  });\n}",
      "after": "async function (done) {\n  blend([await fs.promises.readFile('test/fixture/1b.jpg'), fs.readFileSync('test/fixture/2.png')], function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/4.png', done);\n  });\n}"
    }
  ],
  "83": [
    {
      "filename": "/home/osboxes/node-blend/test/blend.test.js",
      "startLine": 105,
      "endLine": 105,
      "before": "function (done) {\n  blend([fs.readFileSync('test/fixture/1b.jpg'), fs.readFileSync('test/fixture/2.png')], function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/4.png', done);\n  });\n}",
      "after": "async function (done) {\n  blend([await fs.promises.readFile('test/fixture/1b.jpg'), await fs.promises.readFile('test/fixture/2.png')], function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/4.png', done);\n  });\n}"
    }
  ],
  "84": [
    {
      "filename": "/home/osboxes/node-blend/test/blend.test.js",
      "startLine": 114,
      "endLine": 114,
      "before": "function (done) {\n  blend([fs.readFileSync('test/fixture/1c.jpg'), fs.readFileSync('test/fixture/2.png')], function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/5.png', 0.01, done);\n  });\n}",
      "after": "async function (done) {\n  blend([await fs.promises.readFile('test/fixture/1c.jpg'), fs.readFileSync('test/fixture/2.png')], function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/5.png', 0.01, done);\n  });\n}"
    }
  ],
  "85": [
    {
      "filename": "/home/osboxes/node-blend/test/blend.test.js",
      "startLine": 115,
      "endLine": 115,
      "before": "function (done) {\n  blend([fs.readFileSync('test/fixture/1c.jpg'), fs.readFileSync('test/fixture/2.png')], function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/5.png', 0.01, done);\n  });\n}",
      "after": "async function (done) {\n  blend([await fs.promises.readFile('test/fixture/1c.jpg'), await fs.promises.readFile('test/fixture/2.png')], function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/5.png', 0.01, done);\n  });\n}"
    }
  ],
  "86": [
    {
      "filename": "/home/osboxes/node-blend/test/blend.test.js",
      "startLine": 124,
      "endLine": 124,
      "before": "function (done) {\n  blend([fs.readFileSync('test/fixture/105-2.png'), fs.readFileSync('test/fixture/105-1.png')], function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/105.png', done);\n  });\n}",
      "after": "async function (done) {\n  blend([await fs.promises.readFile('test/fixture/105-2.png'), fs.readFileSync('test/fixture/105-1.png')], function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/105.png', done);\n  });\n}"
    }
  ],
  "87": [
    {
      "filename": "/home/osboxes/node-blend/test/blend.test.js",
      "startLine": 125,
      "endLine": 125,
      "before": "function (done) {\n  blend([fs.readFileSync('test/fixture/105-2.png'), fs.readFileSync('test/fixture/105-1.png')], function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/105.png', done);\n  });\n}",
      "after": "async function (done) {\n  blend([await fs.promises.readFile('test/fixture/105-2.png'), await fs.promises.readFile('test/fixture/105-1.png')], function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/105.png', done);\n  });\n}"
    }
  ],
  "88": [
    {
      "filename": "/home/osboxes/node-blend/test/cropping.test.js",
      "startLine": 9,
      "endLine": 9,
      "before": "fs.readFileSync('test/fixture/1.png')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait fs.promises.readFile('test/fixture/1.png')"
    }
  ],
  "89": [
    {
      "filename": "/home/osboxes/node-blend/test/cropping.test.js",
      "startLine": 10,
      "endLine": 10,
      "before": "fs.readFileSync('test/fixture/2.png')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait fs.promises.readFile('test/fixture/2.png')"
    }
  ],
  "90": [
    {
      "filename": "/home/osboxes/node-blend/test/cropping.test.js",
      "startLine": 11,
      "endLine": 11,
      "before": "fs.readFileSync('test/fixture/3.png')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait fs.promises.readFile('test/fixture/3.png')"
    }
  ],
  "91": [
    {
      "filename": "/home/osboxes/node-blend/test/cropping.test.js",
      "startLine": 12,
      "endLine": 12,
      "before": "fs.readFileSync('test/fixture/4.png')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait fs.promises.readFile('test/fixture/4.png')"
    }
  ],
  "92": [
    {
      "filename": "/home/osboxes/node-blend/test/cropping.test.js",
      "startLine": 13,
      "endLine": 13,
      "before": "fs.readFileSync('test/fixture/5.png')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait fs.promises.readFile('test/fixture/5.png')"
    }
  ],
  "93": [
    {
      "filename": "/home/osboxes/node-blend/test/palette.test.js",
      "startLine": 9,
      "endLine": 9,
      "before": "fs.readFileSync('test/fixture/1.png')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait fs.promises.readFile('test/fixture/1.png')"
    }
  ],
  "94": [
    {
      "filename": "/home/osboxes/node-blend/test/palette.test.js",
      "startLine": 10,
      "endLine": 10,
      "before": "fs.readFileSync('test/fixture/2.png')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait fs.promises.readFile('test/fixture/2.png')"
    }
  ],
  "95": [
    {
      "filename": "/home/osboxes/node-blend/test/palette.test.js",
      "startLine": 14,
      "endLine": 14,
      "before": "fs.readFileSync('test/fixture/palette-1.pal')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait fs.promises.readFile('test/fixture/palette-1.pal')"
    }
  ],
  "96": [
    {
      "filename": "/home/osboxes/node-blend/test/palette.test.js",
      "startLine": 42,
      "endLine": 42,
      "before": "function () {\n  var pal = new blend.Palette(fs.readFileSync('./test/support/palette64.act'), 'act');\n  assert.equal('[Palette 64 colors #494746 #c37631 #89827c #d1955c #7397b9 #fc9237 #a09f9c #fbc147 #9bb3ce #b7c9a1 #b5d29c #c4b9aa #cdc4a5 #d5c8a3 #c1d7aa #ccc4b6 #dbd19c #b2c4d5 #eae487 #c9c8c6 #e4db99 #c9dcb5 #dfd3ac #cbd2c2 #d6cdbc #dbd2b6 #c0ceda #ece597 #f7ef86 #d7d3c3 #dfcbc3 #d1d0cd #d1e2bf #d3dec1 #dbd3c4 #e6d8b6 #f4ef91 #d3d3cf #cad5de #ded7c9 #dfdbce #fcf993 #ffff8a #dbd9d7 #dbe7cd #d4dce2 #e4ded3 #ebe3c9 #e0e2e2 #f4edc3 #fdfcae #e9e5dc #f4edda #eeebe4 #fefdc5 #e7edf2 #edf4e5 #f2efe9 #f6ede7 #fefedd #f6f4f0 #f1f5f8 #fbfaf8 #ffffff]', pal.toString());\n}",
      "after": "async function () {\n  var pal = new blend.Palette(await fs.promises.readFile('./test/support/palette64.act'), 'act');\n  assert.equal('[Palette 64 colors #494746 #c37631 #89827c #d1955c #7397b9 #fc9237 #a09f9c #fbc147 #9bb3ce #b7c9a1 #b5d29c #c4b9aa #cdc4a5 #d5c8a3 #c1d7aa #ccc4b6 #dbd19c #b2c4d5 #eae487 #c9c8c6 #e4db99 #c9dcb5 #dfd3ac #cbd2c2 #d6cdbc #dbd2b6 #c0ceda #ece597 #f7ef86 #d7d3c3 #dfcbc3 #d1d0cd #d1e2bf #d3dec1 #dbd3c4 #e6d8b6 #f4ef91 #d3d3cf #cad5de #ded7c9 #dfdbce #fcf993 #ffff8a #dbd9d7 #dbe7cd #d4dce2 #e4ded3 #ebe3c9 #e0e2e2 #f4edc3 #fdfcae #e9e5dc #f4edda #eeebe4 #fefdc5 #e7edf2 #edf4e5 #f2efe9 #f6ede7 #fefedd #f6f4f0 #f1f5f8 #fbfaf8 #ffffff]', pal.toString());\n}"
    }
  ],
  "97": [
    {
      "filename": "/home/osboxes/node-blend/test/palette.test.js",
      "startLine": 47,
      "endLine": 47,
      "before": "function () {\n  var pal = new blend.Palette(fs.readFileSync('./test/support/palette256.act'), 'act');\n  assert.equal('[Palette 256 colors #272727 #3c3c3c #484847 #564b41 #605243 #6a523e #555555 #785941 #5d5d5d #746856 #676767 #956740 #ba712e #787777 #cb752a #c27c3d #b68049 #dc8030 #df9e10 #878685 #e1a214 #928b82 #a88a70 #ea8834 #e7a81d #cb8d55 #909090 #94938c #e18f48 #f68d36 #6f94b7 #e1ab2e #8e959b #c79666 #999897 #ff9238 #ef9447 #a99a88 #f1b32c #919ca6 #a1a09f #f0b04b #8aa4bf #f8bc39 #b3ac8f #d1a67a #e3b857 #a8a8a7 #ffc345 #a2adb9 #afaeab #f9ab69 #afbba4 #c4c48a #b4b2af #dec177 #9ab2cf #a3bebb #d7b491 #b6cd9e #b5d29c #b9c8a2 #f1c969 #c5c79e #bbbab9 #cabdaa #a6bcd1 #cec4a7 #e7cc89 #dad98a #d5c9a3 #fabd8a #c1d7aa #cec5b4 #d1d1a5 #d9cf9f #c5c4c3 #d3c7b5 #ddd59d #b4c6d6 #d1cbb4 #d1c7ba #d7d1aa #e1c6ab #cbc7c2 #dbd0a9 #e8e58a #fee178 #d3cbba #dfd7a3 #d2cfb9 #c9ddb5 #d2cbbe #c3cbce #d7cbba #dcceb2 #dfd3aa #e5dd9a #dbd3b1 #ceccc6 #d7cbbe #d7cfba #dfc3be #dfd3ae #cbcbcb #cbd3c3 #d3cfc0 #e0d8aa #d7cfbe #dbd3b8 #ebe596 #dfd8b0 #c0ceda #f1ee89 #decfbc #d7cfc4 #d7d3c3 #d1d0cd #d2dfc0 #dbd3c3 #e7c7c3 #e7d7b3 #f2ed92 #d1e2bf #dad7c3 #fef383 #d3d3cf #dbd3c7 #e0d3c2 #dfd7c0 #ebe4a8 #dbd7c7 #dfd3c7 #f7f38f #c9d4de #dcdcc5 #dfd7c7 #e7d5c2 #d6d5d4 #faf78e #d7dfca #fbfb8a #fffb86 #dfd7cb #e5ddc0 #dad7d2 #ecd6c1 #cfd7de #e8d0cc #fbfb8e #fffb8a #eae3b8 #e3d7cd #dfdbce #fffb8e #ffff8a #f5efa6 #dae6cc #e3dbcf #edddc3 #dddbd6 #d5dbdf #ffff91 #e3dbd3 #fefc99 #e7dbd2 #eaddcd #e3dfd3 #ebd7d3 #dddddd #d4dee6 #e2dfd7 #fcdcc0 #e7dbd7 #e7dfd3 #ebe4cb #f4eeb8 #e3dfdb #e7dfd7 #ebded5 #e7e3d7 #fefea6 #e1ecd6 #ece5d3 #e7e3db #dee3e5 #ebe3db #efdfdb #efe3d8 #f4efc9 #e6ecdb #ebe3df #ebe7db #f0ecd3 #e5e6e5 #efe7da #ebe7df #efe3df #fefeb8 #dfe7ef #ebe7e3 #edebde #efe7e0 #e8efe0 #e7f3df #ebebe3 #e7ebe8 #f5edd9 #efebe3 #e3ebf1 #e9efe7 #ebebea #efebe7 #f0efe2 #ecf3e5 #fefdc9 #efefe7 #f3efe7 #f5f3e1 #f2efe9 #e9eef4 #ffeddf #efefef #f3efeb #f3f3eb #f0f7eb #fbf7e1 #fefed8 #f3f3ef #f7f3eb #eef3f7 #f7f7ea #f3f3f3 #f3f7ef #f7f3ef #f3f3f7 #f7f3f3 #f7f7ef #fffee3 #f3f7f7 #f7f7f3 #fcf7ee #f7f7f7 #f7fbf4 #f5f7fb #fbf7f6 #fffeef #f7fbfb #fbfbf7 #fbfbfb #fbfbff #fbfffb #fffbfb #fbffff #fffffb #ffffff]', pal.toString());\n}",
      "after": "async function () {\n  var pal = new blend.Palette(await fs.promises.readFile('./test/support/palette256.act'), 'act');\n  assert.equal('[Palette 256 colors #272727 #3c3c3c #484847 #564b41 #605243 #6a523e #555555 #785941 #5d5d5d #746856 #676767 #956740 #ba712e #787777 #cb752a #c27c3d #b68049 #dc8030 #df9e10 #878685 #e1a214 #928b82 #a88a70 #ea8834 #e7a81d #cb8d55 #909090 #94938c #e18f48 #f68d36 #6f94b7 #e1ab2e #8e959b #c79666 #999897 #ff9238 #ef9447 #a99a88 #f1b32c #919ca6 #a1a09f #f0b04b #8aa4bf #f8bc39 #b3ac8f #d1a67a #e3b857 #a8a8a7 #ffc345 #a2adb9 #afaeab #f9ab69 #afbba4 #c4c48a #b4b2af #dec177 #9ab2cf #a3bebb #d7b491 #b6cd9e #b5d29c #b9c8a2 #f1c969 #c5c79e #bbbab9 #cabdaa #a6bcd1 #cec4a7 #e7cc89 #dad98a #d5c9a3 #fabd8a #c1d7aa #cec5b4 #d1d1a5 #d9cf9f #c5c4c3 #d3c7b5 #ddd59d #b4c6d6 #d1cbb4 #d1c7ba #d7d1aa #e1c6ab #cbc7c2 #dbd0a9 #e8e58a #fee178 #d3cbba #dfd7a3 #d2cfb9 #c9ddb5 #d2cbbe #c3cbce #d7cbba #dcceb2 #dfd3aa #e5dd9a #dbd3b1 #ceccc6 #d7cbbe #d7cfba #dfc3be #dfd3ae #cbcbcb #cbd3c3 #d3cfc0 #e0d8aa #d7cfbe #dbd3b8 #ebe596 #dfd8b0 #c0ceda #f1ee89 #decfbc #d7cfc4 #d7d3c3 #d1d0cd #d2dfc0 #dbd3c3 #e7c7c3 #e7d7b3 #f2ed92 #d1e2bf #dad7c3 #fef383 #d3d3cf #dbd3c7 #e0d3c2 #dfd7c0 #ebe4a8 #dbd7c7 #dfd3c7 #f7f38f #c9d4de #dcdcc5 #dfd7c7 #e7d5c2 #d6d5d4 #faf78e #d7dfca #fbfb8a #fffb86 #dfd7cb #e5ddc0 #dad7d2 #ecd6c1 #cfd7de #e8d0cc #fbfb8e #fffb8a #eae3b8 #e3d7cd #dfdbce #fffb8e #ffff8a #f5efa6 #dae6cc #e3dbcf #edddc3 #dddbd6 #d5dbdf #ffff91 #e3dbd3 #fefc99 #e7dbd2 #eaddcd #e3dfd3 #ebd7d3 #dddddd #d4dee6 #e2dfd7 #fcdcc0 #e7dbd7 #e7dfd3 #ebe4cb #f4eeb8 #e3dfdb #e7dfd7 #ebded5 #e7e3d7 #fefea6 #e1ecd6 #ece5d3 #e7e3db #dee3e5 #ebe3db #efdfdb #efe3d8 #f4efc9 #e6ecdb #ebe3df #ebe7db #f0ecd3 #e5e6e5 #efe7da #ebe7df #efe3df #fefeb8 #dfe7ef #ebe7e3 #edebde #efe7e0 #e8efe0 #e7f3df #ebebe3 #e7ebe8 #f5edd9 #efebe3 #e3ebf1 #e9efe7 #ebebea #efebe7 #f0efe2 #ecf3e5 #fefdc9 #efefe7 #f3efe7 #f5f3e1 #f2efe9 #e9eef4 #ffeddf #efefef #f3efeb #f3f3eb #f0f7eb #fbf7e1 #fefed8 #f3f3ef #f7f3eb #eef3f7 #f7f7ea #f3f3f3 #f3f7ef #f7f3ef #f3f3f7 #f7f3f3 #f7f7ef #fffee3 #f3f7f7 #f7f7f3 #fcf7ee #f7f7f7 #f7fbf4 #f5f7fb #fbf7f6 #fffeef #f7fbfb #fbfbf7 #fbfbfb #fbfbff #fbfffb #fffbfb #fbffff #fffffb #ffffff]', pal.toString());\n}"
    }
  ],
  "98": [
    {
      "filename": "/home/osboxes/node-blend/test/palette.test.js",
      "startLine": 78,
      "endLine": 78,
      "before": "function (done) {\n  var palette = blend.Palette.fromJSON(['00000000', '008000']);\n  blend([fs.readFileSync('test/fixture/one_pixel.png')], {\n    palette: palette\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/30.png', done);\n  });\n}",
      "after": "async function (done) {\n  var palette = blend.Palette.fromJSON(['00000000', '008000']);\n  blend([await fs.promises.readFile('test/fixture/one_pixel.png')], {\n    palette: palette\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/30.png', done);\n  });\n}"
    }
  ],
  "99": [
    {
      "filename": "/home/osboxes/node-blend/test/per-image.test.js",
      "startLine": 9,
      "endLine": 9,
      "before": "fs.readFileSync('test/fixture/1.png')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait fs.promises.readFile('test/fixture/1.png')"
    }
  ],
  "100": [
    {
      "filename": "/home/osboxes/node-blend/test/per-image.test.js",
      "startLine": 10,
      "endLine": 10,
      "before": "fs.readFileSync('test/fixture/2.png')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait fs.promises.readFile('test/fixture/2.png')"
    }
  ],
  "101": [
    {
      "filename": "/home/osboxes/node-blend/test/per-image.test.js",
      "startLine": 11,
      "endLine": 11,
      "before": "fs.readFileSync('test/fixture/3.png')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait fs.promises.readFile('test/fixture/3.png')"
    }
  ],
  "102": [
    {
      "filename": "/home/osboxes/node-blend/test/per-image.test.js",
      "startLine": 12,
      "endLine": 12,
      "before": "fs.readFileSync('test/fixture/4.png')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait fs.promises.readFile('test/fixture/4.png')"
    }
  ],
  "103": [
    {
      "filename": "/home/osboxes/node-blend/test/per-image.test.js",
      "startLine": 13,
      "endLine": 13,
      "before": "fs.readFileSync('test/fixture/5.png')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait fs.promises.readFile('test/fixture/5.png')"
    }
  ],
  "104": [
    {
      "filename": "/home/osboxes/node-blend/test/per-image.test.js",
      "startLine": 113,
      "endLine": 113,
      "before": "function (done) {\n  blend([{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }], {\n    width: 700,\n    height: 600,\n    quality: 64\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/stitched.png', done);\n  });\n}",
      "after": "async function (done) {\n  blend([{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }], {\n    width: 700,\n    height: 600,\n    quality: 64\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/stitched.png', done);\n  });\n}"
    }
  ],
  "105": [
    {
      "filename": "/home/osboxes/node-blend/test/per-image.test.js",
      "startLine": 114,
      "endLine": 114,
      "before": "function (done) {\n  blend([{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }], {\n    width: 700,\n    height: 600,\n    quality: 64\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/stitched.png', done);\n  });\n}",
      "after": "async function (done) {\n  blend([{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }], {\n    width: 700,\n    height: 600,\n    quality: 64\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/stitched.png', done);\n  });\n}"
    }
  ],
  "106": [
    {
      "filename": "/home/osboxes/node-blend/test/per-image.test.js",
      "startLine": 115,
      "endLine": 115,
      "before": "function (done) {\n  blend([{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }], {\n    width: 700,\n    height: 600,\n    quality: 64\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/stitched.png', done);\n  });\n}",
      "after": "async function (done) {\n  blend([{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }], {\n    width: 700,\n    height: 600,\n    quality: 64\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/stitched.png', done);\n  });\n}"
    }
  ],
  "107": [
    {
      "filename": "/home/osboxes/node-blend/test/per-image.test.js",
      "startLine": 116,
      "endLine": 116,
      "before": "function (done) {\n  blend([{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }], {\n    width: 700,\n    height: 600,\n    quality: 64\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/stitched.png', done);\n  });\n}",
      "after": "async function (done) {\n  blend([{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }], {\n    width: 700,\n    height: 600,\n    quality: 64\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/stitched.png', done);\n  });\n}"
    }
  ],
  "108": [
    {
      "filename": "/home/osboxes/node-blend/test/per-image.test.js",
      "startLine": 117,
      "endLine": 117,
      "before": "function (done) {\n  blend([{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }], {\n    width: 700,\n    height: 600,\n    quality: 64\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/stitched.png', done);\n  });\n}",
      "after": "async function (done) {\n  blend([{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }], {\n    width: 700,\n    height: 600,\n    quality: 64\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/stitched.png', done);\n  });\n}"
    }
  ],
  "109": [
    {
      "filename": "/home/osboxes/node-blend/test/per-image.test.js",
      "startLine": 118,
      "endLine": 118,
      "before": "function (done) {\n  blend([{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }], {\n    width: 700,\n    height: 600,\n    quality: 64\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/stitched.png', done);\n  });\n}",
      "after": "async function (done) {\n  blend([{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }], {\n    width: 700,\n    height: 600,\n    quality: 64\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/stitched.png', done);\n  });\n}"
    }
  ],
  "110": [
    {
      "filename": "/home/osboxes/node-blend/test/per-image.test.js",
      "startLine": 119,
      "endLine": 119,
      "before": "function (done) {\n  blend([{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }], {\n    width: 700,\n    height: 600,\n    quality: 64\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/stitched.png', done);\n  });\n}",
      "after": "async function (done) {\n  blend([{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }], {\n    width: 700,\n    height: 600,\n    quality: 64\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/stitched.png', done);\n  });\n}"
    }
  ],
  "111": [
    {
      "filename": "/home/osboxes/node-blend/test/per-image.test.js",
      "startLine": 120,
      "endLine": 120,
      "before": "function (done) {\n  blend([{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }], {\n    width: 700,\n    height: 600,\n    quality: 64\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/stitched.png', done);\n  });\n}",
      "after": "async function (done) {\n  blend([{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }], {\n    width: 700,\n    height: 600,\n    quality: 64\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/stitched.png', done);\n  });\n}"
    }
  ],
  "112": [
    {
      "filename": "/home/osboxes/node-blend/test/per-image.test.js",
      "startLine": 121,
      "endLine": 121,
      "before": "function (done) {\n  blend([{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }], {\n    width: 700,\n    height: 600,\n    quality: 64\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/stitched.png', done);\n  });\n}",
      "after": "async function (done) {\n  blend([{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }], {\n    width: 700,\n    height: 600,\n    quality: 64\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/stitched.png', done);\n  });\n}"
    }
  ],
  "113": [
    {
      "filename": "/home/osboxes/node-blend/test/per-image.test.js",
      "startLine": 122,
      "endLine": 122,
      "before": "function (done) {\n  blend([{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }], {\n    width: 700,\n    height: 600,\n    quality: 64\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/stitched.png', done);\n  });\n}",
      "after": "async function (done) {\n  blend([{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }], {\n    width: 700,\n    height: 600,\n    quality: 64\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/stitched.png', done);\n  });\n}"
    }
  ],
  "114": [
    {
      "filename": "/home/osboxes/node-blend/test/per-image.test.js",
      "startLine": 123,
      "endLine": 123,
      "before": "function (done) {\n  blend([{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }], {\n    width: 700,\n    height: 600,\n    quality: 64\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/stitched.png', done);\n  });\n}",
      "after": "async function (done) {\n  blend([{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }], {\n    width: 700,\n    height: 600,\n    quality: 64\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/stitched.png', done);\n  });\n}"
    }
  ],
  "115": [
    {
      "filename": "/home/osboxes/node-blend/test/per-image.test.js",
      "startLine": 124,
      "endLine": 124,
      "before": "function (done) {\n  blend([{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }], {\n    width: 700,\n    height: 600,\n    quality: 64\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/stitched.png', done);\n  });\n}",
      "after": "async function (done) {\n  blend([{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }], {\n    width: 700,\n    height: 600,\n    quality: 64\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/stitched.png', done);\n  });\n}"
    }
  ],
  "116": [
    {
      "filename": "/home/osboxes/node-blend/test/per-image.test.js",
      "startLine": 125,
      "endLine": 125,
      "before": "function (done) {\n  blend([{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }], {\n    width: 700,\n    height: 600,\n    quality: 64\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/stitched.png', done);\n  });\n}",
      "after": "async function (done) {\n  blend([{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }], {\n    width: 700,\n    height: 600,\n    quality: 64\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/stitched.png', done);\n  });\n}"
    }
  ],
  "117": [
    {
      "filename": "/home/osboxes/node-blend/test/per-image.test.js",
      "startLine": 126,
      "endLine": 126,
      "before": "function (done) {\n  blend([{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }], {\n    width: 700,\n    height: 600,\n    quality: 64\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/stitched.png', done);\n  });\n}",
      "after": "async function (done) {\n  blend([{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }], {\n    width: 700,\n    height: 600,\n    quality: 64\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/stitched.png', done);\n  });\n}"
    }
  ],
  "118": [
    {
      "filename": "/home/osboxes/node-blend/test/per-image.test.js",
      "startLine": 127,
      "endLine": 127,
      "before": "function (done) {\n  blend([{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }], {\n    width: 700,\n    height: 600,\n    quality: 64\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/stitched.png', done);\n  });\n}",
      "after": "async function (done) {\n  blend([{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }], {\n    width: 700,\n    height: 600,\n    quality: 64\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/stitched.png', done);\n  });\n}"
    }
  ],
  "119": [
    {
      "filename": "/home/osboxes/node-blend/test/per-image.test.js",
      "startLine": 128,
      "endLine": 128,
      "before": "function (done) {\n  blend([{\n    buffer: fs.readFileSync('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: fs.readFileSync('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: fs.readFileSync('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }], {\n    width: 700,\n    height: 600,\n    quality: 64\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/stitched.png', done);\n  });\n}",
      "after": "async function (done) {\n  blend([{\n    buffer: await fs.promises.readFile('test/fixture/5241-12663.png'),\n    x: -43,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12663.png'),\n    x: -43 + 256,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12663.png'),\n    x: -43 + 512,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12663.png'),\n    x: -43 + 768,\n    y: -120\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12664.png'),\n    x: -43,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12664.png'),\n    x: -43 + 256,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12664.png'),\n    x: -43 + 512,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12664.png'),\n    x: -43 + 768,\n    y: -120 + 256\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12665.png'),\n    x: -43,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12665.png'),\n    x: -43 + 256,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12665.png'),\n    x: -43 + 512,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12665.png'),\n    x: -43 + 768,\n    y: -120 + 512\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5241-12666.png'),\n    x: -43,\n    y: -120 + 768\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5242-12666.png'),\n    x: -43 + 256,\n    y: -120 + 768\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5243-12666.png'),\n    x: -43 + 512,\n    y: -120 + 768\n  }, {\n    buffer: await fs.promises.readFile('test/fixture/5244-12666.png'),\n    x: -43 + 768,\n    y: -120 + 768\n  }], {\n    width: 700,\n    height: 600,\n    quality: 64\n  }, function (err, data) {\n    if (err) return done(err);\n    utilities.imageEqualsFile(data, 'test/fixture/results/stitched.png', done);\n  });\n}"
    }
  ],
  "120": [
    {
      "filename": "/home/osboxes/node-blend/test/repeated.test.js",
      "startLine": 10,
      "endLine": 10,
      "before": "fs.readFileSync('test/fixture/1.png')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait fs.promises.readFile('test/fixture/1.png')"
    }
  ],
  "121": [
    {
      "filename": "/home/osboxes/node-blend/test/repeated.test.js",
      "startLine": 11,
      "endLine": 11,
      "before": "fs.readFileSync('test/fixture/2.png')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait fs.promises.readFile('test/fixture/2.png')"
    }
  ],
  "122": [
    {
      "filename": "/home/osboxes/node-blend/test/repeated.test.js",
      "startLine": 12,
      "endLine": 12,
      "before": "fs.readFileSync('test/fixture/3.png')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait fs.promises.readFile('test/fixture/3.png')"
    }
  ],
  "123": [
    {
      "filename": "/home/osboxes/node-blend/test/repeated.test.js",
      "startLine": 13,
      "endLine": 13,
      "before": "fs.readFileSync('test/fixture/4.png')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait fs.promises.readFile('test/fixture/4.png')"
    }
  ],
  "124": [
    {
      "filename": "/home/osboxes/node-blend/test/repeated.test.js",
      "startLine": 14,
      "endLine": 14,
      "before": "fs.readFileSync('test/fixture/5.png')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait fs.promises.readFile('test/fixture/5.png')"
    }
  ],
  "125": [
    {
      "filename": "/home/osboxes/node-blend/test/tint.test.js",
      "startLine": 30,
      "endLine": 30,
      "before": "function (done) {\n  var options = {\n    width: 256,\n    height: 256,\n    quality: 256,\n    hextree: true\n  };\n  tint([{\n    buffer: fs.readFileSync('./test/source/' + name + '.png'),\n    tint: new_o\n  }], options, function (err, data) {\n    var filepath = './test/tinted/' + file;\n\n    if (!fs.existsSync(filepath)) {\n      fs.writeFileSync(filepath, data);\n    }\n\n    utilities.imageEqualsFile(data, filepath, done);\n  });\n}",
      "after": "async function (done) {\n  var options = {\n    width: 256,\n    height: 256,\n    quality: 256,\n    hextree: true\n  };\n  tint([{\n    buffer: await fs.promises.readFile('./test/source/' + name + '.png'),\n    tint: new_o\n  }], options, function (err, data) {\n    var filepath = './test/tinted/' + file;\n\n    if (!fs.existsSync(filepath)) {\n      fs.writeFileSync(filepath, data);\n    }\n\n    utilities.imageEqualsFile(data, filepath, done);\n  });\n}"
    }
  ],
  "126": [
    {
      "filename": "/home/osboxes/node-blend/test/tint.test.js",
      "startLine": 66,
      "endLine": 66,
      "before": "function (done) {\n  var buf = fs.readFileSync('./test/fixture/tinting/' + file);\n  var tint_obj;\n\n  if (tinter.indexOf('x') > -1) {\n    tint_obj = tint.parseTintString(tinter);\n  } else {\n    tint_obj = tint.parseTintString(tint.upgradeTintString(tinter));\n  }\n\n  tint([{\n    buffer: buf,\n    tint: tint_obj\n  }], options, function (err, data) {\n    var filepath = './test/tint-varied/' + path.basename(file, '.png') + '-' + tinter + \".png\";\n\n    if (!fs.existsSync(filepath)) {\n      fs.writeFileSync(filepath, data);\n    }\n\n    utilities.imageEqualsFile(data, filepath, maxError, done);\n  });\n}",
      "after": "async function (done) {\n  var buf = await fs.promises.readFile('./test/fixture/tinting/' + file);\n  var tint_obj;\n\n  if (tinter.indexOf('x') > -1) {\n    tint_obj = tint.parseTintString(tinter);\n  } else {\n    tint_obj = tint.parseTintString(tint.upgradeTintString(tinter));\n  }\n\n  tint([{\n    buffer: buf,\n    tint: tint_obj\n  }], options, function (err, data) {\n    var filepath = './test/tint-varied/' + path.basename(file, '.png') + '-' + tinter + \".png\";\n\n    if (!fs.existsSync(filepath)) {\n      fs.writeFileSync(filepath, data);\n    }\n\n    utilities.imageEqualsFile(data, filepath, maxError, done);\n  });\n}"
    }
  ],
  "127": [
    {
      "filename": "/home/osboxes/node-blend/test/width-rounding.test.js",
      "startLine": 16,
      "endLine": 16,
      "before": "function (done) {\n  var file = './test/fixture/tinting/white_full.png';\n  var buf = fs.readFileSync(file);\n  blend([{\n    buffer: buf\n  }], options, function (err, data) {\n    var filepath = './test/width-rounding/' + path.basename(file, '.png') + '-expected.png';\n    utilities.imageEqualsFile(data, filepath, done);\n  });\n}",
      "after": "async function (done) {\n  var file = './test/fixture/tinting/white_full.png';\n  var buf = await fs.promises.readFile(file);\n  blend([{\n    buffer: buf\n  }], options, function (err, data) {\n    var filepath = './test/width-rounding/' + path.basename(file, '.png') + '-expected.png';\n    utilities.imageEqualsFile(data, filepath, done);\n  });\n}"
    }
  ],
  "128": [
    {
      "filename": "/home/osboxes/node-blend/test/zero-buffer.test.js",
      "startLine": 1,
      "endLine": 1,
      "before": "require('fs').readFileSync(__dirname + '/fixture/segfault-a.png')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait require('fs').promises.readFile(__dirname + '/fixture/segfault-a.png')"
    }
  ],
  "129": [
    {
      "filename": "/home/osboxes/node-blend/test/zero-buffer.test.js",
      "startLine": 2,
      "endLine": 2,
      "before": "require('fs').readFileSync(__dirname + '/fixture/segfault-b.png')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait require('fs').promises.readFile(__dirname + '/fixture/segfault-b.png')"
    }
  ],
  "130": [
    {
      "filename": "/home/osboxes/node-blend/test/zero-buffer.test.js",
      "startLine": 3,
      "endLine": 3,
      "before": "require('fs').readFileSync(__dirname + '/fixture/8.png')",
      "after": "*Note*: File will be wrapped in an IIFE \n\nawait require('fs').promises.readFile(__dirname + '/fixture/8.png')"
    }
  ]
}